#line 2 "JSONLexer.cpp"
#line 2 "JSONLexer.lex"
/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H




#line 11 "JSONLexer.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer JSONFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *JSONalloc (yy_size_t  );
void *JSONrealloc (void *,yy_size_t  );
void JSONfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "waspcore/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[440] =
    {   0,
        0,    0,    0,    0,    0,    0,   42,   40,   32,   33,
       12,   40,   39,   40,   40,   26,   27,   22,   24,    5,
       25,   40,   23,   29,    6,    9,   13,   10,   37,   37,
       37,   37,   37,   17,   18,   21,   37,   37,   37,   37,
       19,   40,   20,    1,   41,   41,   41,    3,   37,   32,
       14,    0,   34,   39,   15,    0,   29,    0,   31,   39,
       28,   31,   29,    0,    0,    0,    0,    0,    7,   11,
        8,   38,   37,   38,    0,    4,   37,   37,   36,   37,
       37,   37,   37,   37,   37,   37,   16,   37,   30,    0,
       39,   30,   31,    0,    0,    0,   29,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    0,    4,    4,    0,    4,    4,   37,   37,   37,
       37,   37,   35,   37,   37,    2,    0,    0,   31,    0,
        0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    4,    4,    0,    0,    4,    4,    0,
        0,    0,    0,    4,    0,    0,   38,    4,   37,   37,
       37,    0,   31,    0,    0,    0,   31,    0,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    0,    0,    4,    0,    0,    4,    0,    0,

        0,    4,    0,    4,    0,    0,    4,    0,    0,    4,
       37,    0,    0,   31,    0,   31,    0,    0,   31,    0,
        0,    0,    0,    4,    4,    0,    0,    0,    0,    0,
        0,    0,    0,    4,    4,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    0,    4,    0,    0,
        4,    0,    4,    0,    0,    0,    4,    0,    0,   31,
        0,    0,   31,    0,    0,    0,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    4,

        0,    0,    0,    4,    0,    0,    0,    4,    0,    4,
        0,    0,    4,    0,   31,    0,    0,    0,    0,    0,
        4,    0,    0,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    4,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    4,    0,    0,
        4,    0,    0,    4,    0,    4,    0,    0,    4,    0,
        4,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    4,
        0,    0,    4,    0,    4,    0,    0,    4,    0,    4,

        0,    0,    4,    0,    4,    0,    0,    4,    0,    0,
        0,    0,    4,    0,    4,    0,    0,    4,    0,    0,
        0,    4,    0,    4,    0,    4,    0,    0,    4,    0,
        4,    0,    0,    4,    0,    4,    0,    4,    0
    } ;

static yyconst flex_int32_t yy_base[447] =
    {   0,
        0,  117,   94,   95,  361,   75,  421, 7454,    3, 7454,
      359,  385,    0,  380,  377, 7454, 7454, 7454, 7454, 7454,
      195,  208,  347,  221, 7454,  330,  329,  323,  328,  259,
      102,  209,  237, 7454, 7454, 7454,   83,   98,   18,   51,
     7454,  248, 7454,  298, 7454,  323,  292, 7454,  210,  270,
     7454,  291, 7454,    0, 7454,  261,  291,  313,  326,    0,
     7454,  348,  383,  419,  453,  479,  505,  531, 7454, 7454,
     7454, 7454,  253,  358,  544,  448,  223,  241,  250,  236,
       14,  235,  239,  242,   19,  240, 7454,  251, 7454,  559,
        0,  569,  582,  248,  592,  605,  618,  645,  655,  672,

      698,  724,  734,  752,  778,  804,  814,  832,  844,  870,
      880,  898,  910,  932,  920,  943,  965,  997,  244,  272,
      283,  285,  247,  308,  287,  108, 1019, 1032, 1045, 1067,
      975, 1080, 1102, 1134, 1160, 1188, 1210, 1220, 1246, 1272,
     1300, 1322, 1332, 1342, 1364, 1396, 1374, 1406, 1428, 1460,
     1482, 1497, 1438, 1507,  101, 1517, 1530, 1543,  289,  340,
      344, 1565, 1578, 1600, 1613, 1632, 1645, 1667, 1682, 1699,
     1712, 1724, 1734, 1760,  100, 1782, 1795, 1821, 1843, 1853,
     1875, 1887, 1897, 1923,   97, 1945, 1958, 1984, 2006, 2016,
     2026,   96, 2048, 2061, 2080, 2102, 2112, 2122,   93, 2144,

     2157, 2176, 2198, 2210, 2233, 2246, 2264, 2286, 2296, 2306,
       92, 2328, 2341, 2360, 2370, 2383, 2414, 2393, 2437, 2450,
     2463, 2489, 2424, 2499, 2522, 2553, 2576, 2532, 2602, 2624,
     2637, 2663, 2673, 2685, 2718, 2740, 2755, 2695, 2781, 2803,
     2816, 2835, 2857, 2867, 2877, 2899, 2912, 2931, 2953, 2963,
     2973, 2995, 3006, 3028, 3041, 3060, 3070, 3092, 3102, 3124,
     3139, 3152, 3165, 3175, 3201, 3224, 3239, 3255, 3265,   90,
     3275, 3288, 3300, 3322, 3335, 3361, 3383, 3393, 3419, 3441,
     3456, 3473, 3483,   47, 3493, 3506, 3518, 3540, 3553, 3579,
     3601, 3611, 3621, 3643, 3656, 3675, 3685, 3707, 3717, 3727,

     3749, 3762, 3781, 3791, 3813, 3828, 3845, 3855, 3865, 3877,
     3909, 3887, 3919, 3931, 3944, 3959, 3972, 3998, 4020, 4033,
     4052, 4074, 4084, 4094, 4116, 4148, 4170, 4180, 4206, 4221,
     4234, 4260, 4282, 4295, 4314, 4336, 4346, 4356, 4378, 4410,
     4432, 4442, 4468, 4483, 4496, 4506, 4516, 4528, 4560, 4538,
     4570, 4585, 4598, 4608, 4618, 4630, 4662, 4640, 4672, 4684,
     4694, 4709, 4722, 4732, 4742, 4768, 4786, 4796, 4818, 4831,
     4850, 4860, 4882, 4897, 4914, 4940, 4950, 4976, 4994, 5004,
     5026, 5039, 5058, 5068, 5090, 5105, 5122, 5148, 5158, 5170,
     5185, 5202, 5212, 5222, 5234, 5249, 5266, 5276, 5286, 5298,

     5313, 5330, 5340, 5350, 5362, 5394, 5372, 5404, 5416, 5442,
     5457, 5470, 5480, 5490, 5502, 5534, 5512, 5544, 5556, 5582,
     5592, 5602, 5612, 5622, 5632, 5642, 5657, 5670, 5680, 5690,
     5702, 5717, 5734, 5744, 5754, 5766, 5776, 5786, 7454, 5845,
     6100, 6355, 6610, 6865, 7076, 7198
    } ;

static yyconst flex_int32_t yy_def[447] =
    {   0,
      440,  440,  441,  441,    2,    2,  439,  439,  439,  439,
      439,  442,  443,  439,  444,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  445,  445,
      445,  445,  445,  439,  439,  439,   30,  445,  445,  445,
      439,  439,  439,  439,  439,  442,  444,  439,  445,  439,
      439,  442,  439,  443,  439,  444,  439,  439,  439,  446,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  445,  439,  439,   30,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  439,  445,  439,  439,
      446,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  445,  445,  445,
      445,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      445,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,    0,  439,
      439,  439,  439,  439,  439,  439
    } ;

static yyconst flex_int32_t yy_nxt[7711] =
    {   0,
      439,  439,  439,  439,  439,  439,  439,  439,    9,   10,
      439,   50,    9,  439,  439,   50,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,    9,   11,   12,   50,  439,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   25,   72,   26,
       27,   28,   72,   72,   29,   29,   29,   29,   29,   30,
       29,   29,   29,   29,   29,   29,   29,   31,   29,   29,
       29,   29,   29,   32,   29,   29,   29,   29,   33,   29,
       34,  286,   35,   36,   29,   72,   29,   29,   29,   29,

       29,   37,   29,   29,   29,   29,   29,   29,   29,   38,
       29,   29,   29,   29,   29,   39,   29,   29,   29,   29,
       40,   29,   41,   42,   43,    9,   10,   46,   46,    9,
      122,   85,   47,   47,  272,  125,  157,  201,   48,   48,
      194,  187,   72,   49,  177,  203,   72,   73,    9,   11,
       12,   86,   72,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   25,   49,   26,   44,   28,   84,
       79,   29,   29,   29,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   29,   29,   29,

       32,   29,   29,   29,   29,   33,   29,   34,   79,   35,
       36,   29,   79,   29,   29,   29,   29,   29,   37,   29,
       29,   29,   29,   29,   29,   29,   38,   29,   29,   29,
       29,   29,   39,   29,   29,   29,   29,   40,   29,   41,
       42,   43,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   58,   72,   72,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   61,   62,   72,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   50,   72,
       72,   72,   50,   72,   72,   72,   72,   88,   72,   64,
       80,   72,   96,   65,   72,   72,   66,   72,  119,   53,

       67,   50,   68,   74,   75,   82,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   72,  123,  126,   88,
      121,   64,   81,   77,   53,   65,  159,   72,   66,   72,
       53,   72,   67,   72,   68,   61,   62,   83,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  120,  124,
      126,  123,   72,  123,  123,   78,   53,   79,   70,   64,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       89,   87,   72,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   71,   72,  123,  160,  123,   72,   70,
       69,   64,   92,   60,   90,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,   53,   94,   55,   53,   51,
      439,   27,  161,  439,  439,  439,   90,   61,   62,  439,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       79,  439,  439,  439,   79,  439,  439,  439,   94,  439,
      439,   64,  439,  439,  439,   65,  439,  439,   66,  439,
      439,   95,   67,   96,   68,  439,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,  439,  439,  439,  439,
      439,  439,  439,   64,   98,  439,  439,   65,  439,  439,
       66,   98,   72,  117,   67,  439,   68,   99,  100,  439,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      102,  439,   73,  439,  439,  439,  118,  102,  439,  439,
      439,  439,  439,  103,  104,  439,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  439,  439,  439,
      439,  439,  439,  106,   73,  439,  439,  439,  118,  107,
      108,  439,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  439,  439,  439,  439,  439,  439,  110,
      439,  439,  439,  439,  439,  111,  112,  439,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  115,  439,
      439,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  127,  439,  128,  439,  439,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   89,  439,  439,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  131,
      130,  439,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   61,   62,  439,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,  439,   98,  439,  439,  439,
      439,  439,  130,   98,  439,  439,   94,  439,  439,   99,
      100,  439,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  439,  439,  439,  439,  133,  439,   94,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  135,
      439,  439,  439,  439,  439,  439,  135,  439,  439,  439,
      439,  439,  439,  136,  439,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  102,  439,  439,  439,  439,
      439,  439,  102,  439,  439,  439,  137,  439,  103,  104,
      439,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  439,  439,  439,  439,  439,  138,  439,  137,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  140,
      439,  439,  439,  439,  439,  439,  140,  439,  439,  439,
      439,  439,  439,  141,  439,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  106,  439,  439,  439,  439,
      439,  439,  106,  439,  439,  439,  142,  439,  107,  108,
      439,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  439,  439,  439,  439,  439,  143,  439,  142,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  145,
      439,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  110,  439,  439,  439,  439,  439,  439,  110,  439,
      439,  439,  146,  439,  111,  112,  439,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  439,  439,  439,
      439,  439,  147,  439,  146,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  149,  439,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  150,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  439,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      151,  439,  439,  439,  439,  439,  439,  439,  439,  153,
      150,  152,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  151,  155,  439,  439,  439,  439,  439,  156,
      439,  157,  439,  152,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  162,  439,  155,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  162,  439,  439,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,   89,
      439,  439,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  439,  439,  439,  439,  439,  439,  439,  165,
      439,  166,  439,  164,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   89,  439,  439,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  439,  439,  439,
      439,  439,  439,  439,  439,  164,  439,  439,  168,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  439,
      439,  439,  439,  439,  439,  135,  439,  439,  439,  439,
      439,  439,  135,  439,  439,  439,  439,  439,  439,  439,
      168,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  135,  439,  439,  439,  439,  439,  439,  135,  439,

      439,  439,  169,  439,  170,  171,  439,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  439,  439,  135,
      439,  439,  439,  439,  439,  439,  135,  439,  439,  439,
      439,  439,  173,  439,  169,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  439,  439,  439,  439,  439,
      439,  439,  176,  439,  177,  439,  175,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  140,  439,  439,
      439,  439,  439,  439,  140,  439,  439,  439,  175,  439,
      439,  439,  439,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  140,  439,  439,  439,  439,  439,  439,
      140,  439,  439,  439,  179,  439,  180,  181,  439,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  439,
      439,  140,  439,  439,  439,  439,  439,  439,  140,  439,
      439,  439,  439,  439,  183,  439,  179,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  439,  439,  439,
      439,  439,  439,  439,  186,  439,  187,  439,  185,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  439,

      185,  439,  439,  439,  439,  439,  439,  439,  190,  439,
      189,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  439,  192,  439,  439,  439,  439,  439,  193,  439,
      194,  439,  189,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  439,  192,  439,  439,  439,  439,  439,
      439,  439,  197,  439,  196,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  439,  199,  439,  439,  439,

      439,  439,  200,  439,  201,  439,  196,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  439,  439,  439,
      439,  439,  439,  439,  156,  439,  203,  439,  199,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  205,
      439,  206,  439,  439,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  209,  208,  439,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,   72,  117,  439,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      439,  439,  439,  439,  439,  439,  439,  208,  439,  439,
      439,  211,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,   89,  439,  439,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  439,  439,  439,  439,  439,
      439,  439,  213,  211,  128,  439,  212,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  439,  439,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      439,  439,  439,  439,  439,  439,  215,  439,  212,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,   89,
      439,  439,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  439,  439,  439,  439,  439,  439,  439,  218,
      439,  439,  439,  217,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  220,  439,  221,  439,  439,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  439,
      439,  439,  439,  439,  439,  217,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  223,  439,  439,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  225,
      439,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  135,  226,  439,  439,  439,  439,  439,  135,  439,

      439,  439,  439,  439,  439,  439,  439,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  439,  439,  439,
      439,  439,  439,  439,  226,  439,  439,  439,  227,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  228,
      439,  439,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  135,  439,  439,  439,  439,  439,  439,  135,
      227,  439,  439,  439,  439,  439,  136,  439,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  439,  439,
      439,  439,  439,  439,  439,  230,  439,  231,  439,  175,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  233,
      439,  175,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  235,  439,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  140,  236,  439,  439,  439,  439,
      439,  140,  439,  439,  439,  439,  439,  439,  439,  439,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      439,  439,  439,  439,  439,  439,  439,  236,  439,  439,
      439,  237,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  238,  439,  439,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  140,  439,  439,  439,  439,
      439,  439,  140,  237,  439,  439,  439,  439,  439,  141,
      439,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  439,  439,  439,  439,  439,  439,  439,  240,  439,
      241,  439,  185,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  439,  185,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  243,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  244,  439,  439,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  439,  439,
      439,  439,  439,  439,  439,  145,  243,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  439,  439,  439,
      439,  439,  439,  439,  246,  439,  247,  439,  192,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  439,
      192,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      249,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  250,  439,  439,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  439,  439,  439,  439,  439,  439,
      439,  149,  249,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  209,  439,  199,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  117,  439,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  199,  252,  155,  439,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      252,  439,  439,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  439,  439,  439,  439,  439,  439,  439,
      155,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  439,  439,  439,  439,  439,  439,  439,  255,  439,
      256,  439,  254,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  439,  254,  439,  439,  439,  439,  439,
      259,  439,  439,  439,  258,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  162,  439,  439,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  439,  439,

      439,  439,  439,  439,   89,  439,  258,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,   89,  212,  439,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      439,  261,  439,  439,  439,  439,  262,  439,  166,  439,
      212,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,   89,  439,  261,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  264,  439,  439,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  264,  439,  439,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      135,  439,  439,  439,  439,  439,  439,  135,  439,  439,
      439,  439,  439,  439,  439,  439,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  439,  266,  439,  439,
      439,  439,  439,  439,  439,  439,  268,  267,  439,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  266,
      270,  439,  439,  439,  439,  271,  439,  272,  439,  267,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      439,  439,  439,  439,  439,  439,  439,  439,  274,  439,
      275,  439,  270,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  135,  439,  439,  439,  439,  439,  439,
      135,  439,  439,  439,  439,  439,  439,  439,  439,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  278,  439,
      277,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  278,  439,  439,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  140,  439,  439,  439,  439,  439,

      439,  140,  277,  439,  439,  439,  439,  439,  439,  439,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      439,  280,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  439,  281,  439,  439,  439,  439,  439,  439,
      439,  439,  282,  280,  439,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  439,  439,  439,  439,  439,
      439,  439,  285,  439,  286,  281,  284,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  288,  439,  289,

      439,  439,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  140,  439,  439,  439,  439,  439,  284,  140,
      439,  439,  439,  439,  439,  439,  439,  439,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  292,  439,  291,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      292,  439,  439,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  439,  439,  439,  439,  439,  439,  439,
      439,  291,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  439,  439,  439,  439,  439,  439,  439,  295,

      439,  296,  439,  294,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  439,  294,  439,  439,  439,  439,
      439,  439,  439,  299,  439,  298,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  299,  439,  439,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  439,
      439,  439,  439,  439,  439,  439,  439,  298,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  439,  439,
      439,  439,  439,  439,  439,  302,  439,  303,  439,  301,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      439,  301,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  305,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  439,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  439,  439,  439,  439,  439,  439,  439,
      307,  439,  206,  305,  306,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  309,  439,  439,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  439,  439,

      439,  439,  439,  439,  309,  439,  306,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  439,  439,  439,
      439,  439,  439,  439,  312,  439,  439,  439,  311,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  439,
      439,  439,  439,  439,  439,  439,  439,  439,   89,  439,
      311,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  314,  439,  439,  439,  439,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  215,  439,  439,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,   89,
      439,  439,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  135,  261,  439,  439,  439,  439,  439,  135,
      439,  439,  439,  439,  439,  439,  439,  439,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  439,  439,
      439,  439,  439,  439,  439,  261,  317,  439,  221,  316,
      439,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  319,  439,  320,  439,  439,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  439,  439,  439,  439,

      439,  316,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  323,  322,  439,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  225,  439,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  439,  439,  439,
      439,  439,  439,  439,  439,  322,  325,  439,  270,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  325,
      439,  439,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  135,  439,  439,  439,  439,  439,  439,  135,

      270,  439,  439,  439,  439,  439,  439,  439,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  439,  439,
      439,  439,  439,  439,  439,  328,  439,  439,  439,  327,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      140,  439,  439,  439,  439,  439,  439,  140,  439,  439,
      439,  327,  439,  439,  439,  439,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  439,  439,  439,  439,
      439,  439,  439,  331,  439,  231,  439,  330,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  439,

      334,  439,  439,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  439,  439,  439,  439,  439,  439,  330,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      337,  336,  439,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  235,  439,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  439,  439,  439,  439,  439,
      439,  439,  439,  336,  339,  439,  284,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  339,  439,  439,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      140,  439,  439,  439,  439,  439,  439,  140,  284,  439,
      439,  439,  439,  439,  439,  439,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  439,  439,  439,  439,
      439,  439,  439,  342,  439,  439,  439,  341,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  439,  341,
      439,  439,  439,  439,  439,  345,  439,  241,  439,  344,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      347,  439,  439,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  439,  439,  439,  439,  439,  439,  347,
      439,  344,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  439,  439,  439,  439,  439,  439,  439,  350,
      439,  439,  439,  349,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  439,  349,  439,  439,  439,  439,
      439,  353,  439,  247,  439,  352,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  355,  439,  439,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  439,
      439,  439,  439,  439,  439,  355,  439,  352,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  439,  439,
      439,  439,  439,  439,  439,  358,  439,  439,  439,  357,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  439,  439,  439,  439,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  439,  439,  439,  439,  252,
      439,  357,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  439,  306,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  439,  362,  439,  439,  439,  439,
      439,  363,  439,  256,  439,  306,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  439,  362,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,   89,  439,
      439,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  365,  439,  439,  439,  439,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  264,  439,  439,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  135,
      439,  439,  439,  439,  439,  439,  135,  439,  439,  439,
      439,  439,  439,  439,  439,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  367,  439,  316,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  367,  439,  439,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      439,  439,  439,  439,  439,  439,  439,  439,  316,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  439,
      439,  439,  439,  439,  439,  439,  370,  439,  371,  439,
      369,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  439,  369,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  373,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  439,  439,  439,  439,  439,  439,  135,
      439,  439,  439,  439,  439,  439,  135,  439,  439,  439,
      439,  439,  439,  439,  373,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  439,  439,  439,  439,  439,
      439,  439,  375,  439,  275,  439,  374,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  135,  439,  439,
      439,  439,  439,  439,  135,  439,  439,  439,  374,  439,
      439,  439,  439,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  377,  439,  439,  439,  439,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  278,  439,
      439,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  140,  439,  439,  439,  439,  439,  439,  140,  439,

      439,  439,  439,  439,  439,  439,  439,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  379,  439,  330,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  379,
      439,  439,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  439,  439,  439,  439,  439,  439,  439,  439,
      330,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  439,  439,  439,  439,  439,  439,  439,  382,  439,
      383,  439,  381,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  439,  381,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  385,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  439,  439,  439,  439,  439,
      439,  140,  439,  439,  439,  439,  439,  439,  140,  439,
      439,  439,  439,  439,  439,  439,  385,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  439,  439,  439,
      439,  439,  439,  439,  387,  439,  289,  439,  386,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  140,

      439,  439,  439,  439,  439,  439,  140,  439,  439,  439,
      386,  439,  439,  439,  439,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  389,  439,  439,  439,  439,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      292,  439,  439,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  439,  344,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  439,  391,  439,  439,  439,

      439,  439,  392,  439,  296,  439,  344,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  394,  391,  439,
      439,  439,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  299,  439,  439,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  439,  352,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  439,  396,  439,

      439,  439,  439,  439,  397,  439,  303,  439,  352,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  439,
      396,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  399,  439,  439,  439,  439,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  309,  439,  439,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  135,

      362,  439,  439,  439,  439,  439,  135,  439,  439,  439,
      439,  439,  439,  439,  439,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  439,  439,  439,  439,  439,
      439,  439,  362,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  439,  439,  439,  439,  439,  439,  439,
      402,  439,  320,  439,  401,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  439,  439,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  439,  439,
      439,  439,  439,  439,  404,  439,  401,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  439,  439,  439,
      439,  439,  439,  439,  407,  439,  439,  439,  406,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      439,  439,  439,  439,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  439,  439,  439,  439,  325,  439,
      406,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  135,  439,  439,  439,  439,  439,  439,  135,  439,
      439,  439,  439,  439,  439,  439,  439,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  140,  374,  439,
      439,  439,  439,  439,  140,  439,  439,  439,  439,  439,
      439,  439,  439,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  439,  439,  439,  439,  439,  439,  439,
      374,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  439,  439,  439,  439,  439,  439,  439,  412,  439,
      334,  439,  411,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  414,  439,  439,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  439,  439,  439,  439,

      439,  439,  414,  439,  411,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  439,  439,  439,  439,  439,
      439,  439,  417,  439,  439,  439,  416,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  439,  439,
      439,  439,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  439,  439,  439,  439,  339,  439,  416,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  140,
      439,  439,  439,  439,  439,  439,  140,  439,  439,  439,
      439,  439,  439,  439,  439,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  439,  386,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  421,  439,  439,
      439,  439,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  439,  439,  439,  439,  347,  439,  386,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  439,
      391,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  423,  439,  439,  439,  439,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  439,  439,  439,  439,
      355,  439,  391,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  439,  396,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  425,  439,  439,  439,  439,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      439,  439,  439,  439,  367,  439,  396,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  439,  401,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  439,
      427,  439,  439,  439,  439,  439,  428,  439,  371,  439,
      401,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  439,  427,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  135,  439,  439,  439,  439,  439,  439,
      135,  439,  439,  439,  439,  439,  439,  439,  439,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  430,

      439,  439,  439,  439,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  379,  439,  439,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  439,  411,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  439,
      432,  439,  439,  439,  439,  439,  433,  439,  383,  439,
      411,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  439,  432,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  140,  439,  439,  439,  439,  439,  439,
      140,  439,  439,  439,  439,  439,  439,  439,  439,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  435,

      439,  439,  439,  439,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  404,  439,  439,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  439,  427,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  437,
      439,  439,  439,  439,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  439,  439,  439,  439,  414,  439,
      427,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  439,  432,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  432,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  439,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  439,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   56,   56,   56,   56,   56,
       56,   56,   56,   56,  439,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  439,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       73,  439,  439,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  439,  439,  439,  439,  439,  439,  439,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  439,  439,  439,  439,
       73,  439,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   91,   91,

       91,   91,   91,   91,   91,   91,   91,  439,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,    7,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439
    } ;

static yyconst flex_int32_t yy_chk[7711] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
        0,    9,    1,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    1,    9,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   81,    1,
        1,    1,   39,   85,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,  284,    1,    1,    1,   40,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    3,    4,    2,
       81,   39,    3,    4,  270,   85,  211,  199,    3,    4,
      192,  185,   38,    6,  175,  155,   31,   37,    2,    2,
        2,   40,  126,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    6,    2,    2,    2,   37,
       31,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   38,    2,
        2,    2,   31,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   32,   49,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   24,   24,   77,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   50,   82,
       80,   33,   50,   83,   86,   78,   84,   49,  119,   24,
       32,  123,   94,   24,   79,   88,   24,   73,   77,   56,

       24,   50,   24,   30,   30,   33,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  120,   82,   88,   49,
       80,   24,   32,   30,   52,   24,  119,  121,   24,  122,
       47,  125,   24,  159,   24,   57,   57,   33,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   78,   84,
       88,  121,  124,   83,   86,   30,   46,  159,   44,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       59,   42,   29,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   28,  160,  122,  120,  125,  161,   27,
       26,   57,   62,   23,   59,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   15,   62,   14,   12,   11,
        7,    5,  124,    0,    0,    0,   59,   63,   63,    0,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      160,    0,    0,    0,  161,    0,    0,    0,   62,    0,
        0,   63,    0,    0,    0,   63,    0,    0,   63,    0,
        0,   64,   63,   64,   63,    0,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,    0,    0,    0,    0,
        0,    0,    0,   63,   65,    0,    0,   63,    0,    0,
       63,   65,   76,   76,   63,    0,   63,   65,   65,    0,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       66,    0,   76,    0,    0,    0,   76,   66,    0,    0,
        0,    0,    0,   66,   66,    0,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   67,    0,    0,    0,
        0,    0,    0,   67,   76,    0,    0,    0,   76,   67,
       67,    0,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   68,    0,    0,    0,    0,    0,    0,   68,
        0,    0,    0,    0,    0,   68,   68,    0,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   75,    0,
        0,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   90,    0,   90,    0,    0,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,    0,    0,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   96,
       93,    0,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   97,   97,    0,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,    0,   98,    0,    0,    0,
        0,    0,   93,   98,    0,    0,   97,    0,    0,   98,
       98,    0,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,    0,    0,    0,    0,  100,    0,   97,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  101,
        0,    0,    0,    0,    0,    0,  101,    0,    0,    0,
        0,    0,    0,  101,    0,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  102,    0,    0,    0,    0,
        0,    0,  102,    0,    0,    0,  101,    0,  102,  102,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,    0,    0,    0,    0,    0,  104,    0,  101,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  105,
        0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
        0,    0,    0,  105,    0,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  106,    0,    0,    0,    0,
        0,    0,  106,    0,    0,    0,  105,    0,  106,  106,
        0,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,    0,    0,    0,    0,  108,    0,  105,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  110,    0,    0,    0,    0,    0,    0,  110,    0,
        0,    0,  109,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,    0,    0,    0,
        0,    0,  112,    0,  109,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  113,    0,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  114,  113,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,    0,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      114,    0,    0,    0,    0,    0,    0,    0,    0,  117,
      113,  116,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  114,  117,    0,    0,    0,    0,    0,  118,
        0,  118,    0,  116,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  127,    0,  117,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  128,    0,    0,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  129,
        0,    0,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,    0,    0,    0,    0,    0,    0,    0,  130,
        0,  130,    0,  129,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  132,    0,    0,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,    0,    0,    0,
        0,    0,    0,    0,    0,  129,    0,    0,  132,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,    0,
        0,    0,    0,    0,    0,  134,    0,    0,    0,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
      132,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  135,    0,    0,    0,    0,    0,    0,  135,    0,

        0,    0,  134,    0,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,    0,    0,  136,
        0,    0,    0,    0,    0,    0,  136,    0,    0,    0,
        0,    0,  136,    0,  134,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,    0,    0,    0,    0,    0,
        0,    0,  137,    0,  137,    0,  136,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  139,    0,    0,
        0,    0,    0,    0,  139,    0,    0,    0,  136,    0,
        0,    0,    0,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  140,    0,    0,    0,    0,    0,    0,
      140,    0,    0,    0,  139,    0,  140,  140,    0,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,    0,
        0,  141,    0,    0,    0,    0,    0,    0,  141,    0,
        0,    0,    0,    0,  141,    0,  139,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,    0,    0,    0,
        0,    0,    0,    0,  142,    0,  142,    0,  141,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,    0,

      141,    0,    0,    0,    0,    0,    0,    0,  145,    0,
      144,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,    0,  145,    0,    0,    0,    0,    0,  146,    0,
      146,    0,  144,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,    0,  145,    0,    0,    0,    0,    0,
        0,    0,  149,    0,  148,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,    0,  149,    0,    0,    0,

        0,    0,  150,    0,  150,    0,  148,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,    0,    0,    0,
        0,    0,    0,    0,  151,    0,  151,    0,  149,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  152,
        0,  152,    0,    0,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  157,  154,    0,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  158,  158,    0,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

        0,    0,    0,    0,    0,    0,    0,  154,    0,    0,
        0,  158,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  163,    0,    0,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,    0,    0,    0,    0,    0,
        0,    0,  164,  158,  164,    0,  163,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  165,    0,    0,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
        0,    0,    0,    0,    0,    0,  166,    0,  163,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  167,
        0,    0,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,    0,    0,    0,    0,    0,    0,    0,  168,
        0,    0,    0,  167,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  169,    0,  169,    0,    0,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,    0,
        0,    0,    0,    0,    0,  167,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  171,    0,    0,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  172,
        0,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  174,  172,    0,    0,    0,    0,    0,  174,    0,

        0,    0,    0,    0,    0,    0,    0,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,    0,    0,    0,
        0,    0,    0,    0,  172,    0,    0,    0,  174,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
        0,    0,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  178,    0,    0,    0,    0,    0,    0,  178,
      174,    0,    0,    0,    0,    0,  178,    0,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,    0,    0,
        0,    0,    0,    0,    0,  179,    0,  179,    0,  178,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  181,
        0,  178,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  182,    0,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  184,  182,    0,    0,    0,    0,
        0,  184,    0,    0,    0,    0,    0,    0,    0,    0,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
        0,    0,    0,    0,    0,    0,    0,  182,    0,    0,
        0,  184,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  187,    0,    0,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,    0,    0,    0,    0,
        0,    0,  188,  184,    0,    0,    0,    0,    0,  188,
        0,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,    0,    0,    0,    0,    0,    0,    0,  189,    0,
      189,    0,  188,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,    0,  188,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  191,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  194,    0,    0,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,    0,    0,
        0,    0,    0,    0,    0,  195,  191,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,    0,    0,    0,
        0,    0,    0,    0,  196,    0,  196,    0,  195,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,    0,
      195,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      198,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  201,    0,    0,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,    0,    0,    0,    0,    0,    0,
        0,  202,  198,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  203,    0,  202,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,    0,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  202,  205,  204,    0,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      206,    0,    0,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,    0,    0,    0,    0,    0,    0,    0,
      204,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,    0,    0,    0,    0,    0,    0,    0,  208,    0,
      208,    0,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,    0,  207,    0,    0,    0,    0,    0,
      212,    0,    0,    0,  210,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  213,    0,    0,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,    0,    0,

        0,    0,    0,    0,  214,    0,  210,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  216,  214,    0,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
        0,  216,    0,    0,    0,    0,  217,    0,  217,    0,
      214,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  219,    0,  216,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  220,    0,    0,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  221,    0,    0,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      222,    0,    0,    0,    0,    0,    0,  222,    0,    0,
        0,    0,    0,    0,    0,    0,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,    0,  222,    0,    0,
        0,    0,    0,    0,    0,    0,  225,  224,    0,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  222,
      225,    0,    0,    0,    0,  226,    0,  226,    0,  224,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
        0,    0,    0,    0,    0,    0,    0,    0,  227,    0,
      227,    0,  225,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  229,    0,    0,    0,    0,    0,    0,
      229,    0,    0,    0,    0,    0,    0,    0,    0,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  230,    0,
      229,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  231,    0,    0,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  232,    0,    0,    0,    0,    0,

        0,  232,  229,    0,    0,    0,    0,    0,    0,    0,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
        0,  232,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,    0,  234,    0,    0,    0,    0,    0,    0,
        0,    0,  235,  232,    0,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,    0,    0,    0,    0,    0,
        0,    0,  236,    0,  236,  234,  235,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  237,    0,  237,

        0,    0,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  239,    0,    0,    0,    0,    0,  235,  239,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  240,    0,  239,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      241,    0,    0,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,    0,    0,    0,    0,    0,    0,    0,
        0,  239,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,    0,    0,    0,    0,    0,    0,    0,  243,

        0,  243,    0,  242,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,    0,  242,    0,    0,    0,    0,
        0,    0,    0,  246,    0,  245,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  247,    0,    0,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,    0,
        0,    0,    0,    0,    0,    0,    0,  245,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,    0,    0,
        0,    0,    0,    0,    0,  249,    0,  249,    0,  248,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
        0,  248,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  251,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,    0,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,    0,    0,    0,    0,    0,    0,    0,
      254,    0,  254,  251,  253,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  255,    0,    0,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,    0,    0,

        0,    0,    0,    0,  256,    0,  253,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,    0,    0,    0,
        0,    0,    0,    0,  258,    0,    0,    0,  257,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  260,    0,
      257,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  261,    0,    0,    0,    0,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  262,    0,    0,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  263,
        0,    0,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  265,  263,    0,    0,    0,    0,    0,  265,
        0,    0,    0,    0,    0,    0,    0,    0,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,    0,    0,
        0,    0,    0,    0,    0,  263,  266,    0,  266,  265,
        0,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  267,    0,  267,    0,    0,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,    0,    0,    0,    0,

        0,  265,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  272,  269,    0,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  273,    0,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,    0,    0,    0,
        0,    0,    0,    0,    0,  269,  274,    0,  273,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  275,
        0,    0,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  276,    0,    0,    0,    0,    0,    0,  276,

      273,    0,    0,    0,    0,    0,    0,    0,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,    0,    0,
        0,    0,    0,    0,    0,  277,    0,    0,    0,  276,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      279,    0,    0,    0,    0,    0,    0,  279,    0,    0,
        0,  276,    0,    0,    0,    0,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,    0,    0,    0,    0,
        0,    0,    0,  280,    0,  280,    0,  279,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  281,    0,

      281,    0,    0,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,    0,    0,    0,    0,    0,    0,  279,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      286,  283,    0,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  287,    0,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,    0,    0,    0,    0,    0,
        0,    0,    0,  283,  288,    0,  287,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  289,    0,    0,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      290,    0,    0,    0,    0,    0,    0,  290,  287,    0,
        0,    0,    0,    0,    0,    0,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,    0,    0,    0,    0,
        0,    0,    0,  291,    0,    0,    0,  290,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,    0,  290,
        0,    0,    0,    0,    0,  294,    0,  294,    0,  293,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      295,    0,    0,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,    0,    0,    0,    0,    0,    0,  296,
        0,  293,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,    0,    0,    0,    0,    0,    0,    0,  298,
        0,    0,    0,  297,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,    0,  297,    0,    0,    0,    0,
        0,  301,    0,  301,    0,  300,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  302,    0,    0,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,    0,
        0,    0,    0,    0,    0,  303,    0,  300,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,    0,    0,
        0,    0,    0,    0,    0,  305,    0,    0,    0,  304,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      306,    0,    0,    0,    0,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,    0,    0,    0,    0,  307,
        0,  304,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,    0,  308,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,    0,  310,    0,    0,    0,    0,
        0,  311,    0,  311,    0,  308,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,    0,  310,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  315,    0,
        0,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  316,    0,    0,    0,    0,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  317,    0,    0,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  318,
        0,    0,    0,    0,    0,    0,  318,    0,    0,    0,
        0,    0,    0,    0,    0,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  319,    0,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  320,    0,    0,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
        0,    0,    0,    0,    0,    0,    0,    0,  318,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,    0,
        0,    0,    0,    0,    0,    0,  322,    0,  322,    0,
      321,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,    0,  321,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,    0,    0,    0,    0,    0,    0,  326,
        0,    0,    0,    0,    0,    0,  326,    0,    0,    0,
        0,    0,    0,    0,  324,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,    0,    0,    0,    0,    0,
        0,    0,  327,    0,  327,    0,  326,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  329,    0,    0,
        0,    0,    0,    0,  329,    0,    0,    0,  326,    0,
        0,    0,    0,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  330,    0,    0,    0,    0,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  331,    0,
        0,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  332,    0,    0,    0,    0,    0,    0,  332,    0,

        0,    0,    0,    0,    0,    0,    0,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  333,    0,  332,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  334,
        0,    0,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,    0,    0,    0,    0,    0,    0,    0,    0,
      332,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,    0,    0,    0,    0,    0,    0,    0,  336,    0,
      336,    0,  335,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  337,  337,  337,  337,  337,  337,

      337,  337,  337,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,    0,  335,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  338,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,    0,    0,    0,    0,    0,
        0,  340,    0,    0,    0,    0,    0,    0,  340,    0,
        0,    0,    0,    0,    0,    0,  338,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
        0,    0,    0,    0,  341,    0,  341,    0,  340,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,

        0,    0,    0,    0,    0,    0,  343,    0,    0,    0,
      340,    0,    0,    0,    0,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  344,    0,    0,    0,    0,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      345,    0,    0,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,    0,  346,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,    0,  348,    0,    0,    0,

        0,    0,  349,    0,  349,    0,  346,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  352,  348,    0,
        0,    0,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  353,    0,    0,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,    0,  354,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,    0,  356,    0,

        0,    0,    0,    0,  357,    0,  357,    0,  354,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,    0,
      356,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  362,    0,    0,    0,    0,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  363,    0,    0,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  366,

      364,    0,    0,    0,    0,    0,  366,    0,    0,    0,
        0,    0,    0,    0,    0,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,    0,    0,    0,    0,    0,
        0,    0,  364,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,    0,    0,    0,    0,    0,    0,    0,
      369,    0,  369,    0,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  370,    0,    0,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,    0,    0,
        0,    0,    0,    0,  371,    0,  368,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,    0,    0,    0,
        0,    0,    0,    0,  373,    0,    0,    0,  372,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  374,
        0,    0,    0,    0,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,    0,    0,    0,    0,  375,    0,
      372,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  376,    0,    0,    0,    0,    0,    0,  376,    0,
        0,    0,    0,    0,    0,    0,    0,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  378,  376,    0,
        0,    0,    0,    0,  378,    0,    0,    0,    0,    0,
        0,    0,    0,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,    0,    0,    0,    0,    0,    0,    0,
      376,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,    0,    0,    0,    0,    0,    0,    0,  381,    0,
      381,    0,  380,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  382,    0,    0,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,    0,    0,    0,    0,

        0,    0,  383,    0,  380,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,    0,    0,    0,    0,    0,
        0,    0,  385,    0,    0,    0,  384,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  386,    0,    0,
        0,    0,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,    0,    0,    0,    0,  387,    0,  384,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
        0,    0,    0,    0,    0,    0,  388,    0,    0,    0,
        0,    0,    0,    0,    0,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,    0,  388,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  391,    0,    0,
        0,    0,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,    0,    0,    0,    0,  392,    0,  388,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,    0,
      393,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  396,    0,    0,    0,    0,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,    0,    0,    0,    0,
      397,    0,  393,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,    0,  398,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  401,    0,    0,    0,    0,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
        0,    0,    0,    0,  402,    0,  398,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,    0,  403,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,    0,
      405,    0,    0,    0,    0,    0,  406,    0,  406,    0,
      403,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,    0,  405,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,    0,    0,    0,    0,    0,    0,
      410,    0,    0,    0,    0,    0,    0,    0,    0,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  411,

        0,    0,    0,    0,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  412,    0,    0,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,    0,  413,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,    0,
      415,    0,    0,    0,    0,    0,  416,    0,  416,    0,
      413,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,    0,  415,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  420,    0,    0,    0,    0,    0,    0,
      420,    0,    0,    0,    0,    0,    0,    0,    0,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,

        0,    0,    0,    0,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  428,    0,    0,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,    0,  429,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  432,
        0,    0,    0,    0,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,    0,    0,    0,    0,  433,    0,
      429,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,    0,  434,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,    0,  434,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  442,  442,  442,  442,  442,
      442,  442,  442,  442,    0,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      443,  443,  443,  443,  443,  443,  443,  443,  443,    0,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  444,  444,  444,  444,  444,
      444,  444,  444,  444,    0,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      445,    0,    0,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,    0,    0,    0,    0,    0,    0,    0,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,    0,    0,    0,    0,
      445,    0,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  446,  446,

      446,  446,  446,  446,  446,  446,  446,    0,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439
    } ;

static yyconst yy_state_type yy_NUL_trans[439] =
    {   0,
        8,    8,   45,   45,    8,    8,    0,    0,    0,    0,
        0,   52,   54,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   56,    0,    0,    0,
        0,   52,    0,   54,    0,   56,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "JSONLexer.lex"

#line 8 "JSONLexer.lex"

#include <string>
#include <sstream>
#include "JSONLexer.h"
#include "JSONInterpreter.h"

/* import the parser's token type into a local typedef */
typedef wasp::JSONParser::token token;
typedef wasp::JSONParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "JSONFlexLexer" */
/*%option yyclass="wasp::JSONLexerImpl"*/
/* enable scanner to generate debug output. disable this for release
* versions. */
/*%option debug*/
/* no support for include files is planned */
/* enables the use of start condition stacks */


/* This string does not allow special characters '-','/'
*  and should only occur in the context of reference
*/
/*
* The 'execution unit' is a rebranded SCALE sequence construct
* where the sequence started with the unit_start rule below
* and terminated with unit_end rule below.
* We reproduce it here to account for the input construct
* while in transition...
*/
/* The following paragraph suffices to track locations accurately. Each time
* yylex is invoked, the begin position is moved onto the end position. */
#line 100 "JSONLexer.lex"
#define YY_USER_ACTION  yylloc->columns(yyleng); file_offset+=yyleng;
#line 2306 "JSONLexer.cpp"

#define INITIAL 0
#define subtraction 1
#define execution_unit 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 103 "JSONLexer.lex"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();

 /*** BEGIN EXAMPLE - Change the wasp lexer rules below ***/

#line 2421 "JSONLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7454 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 112 "JSONLexer.lex"
{
    yy_push_state(execution_unit); // enter the 'unit' of execution
        capture_token(yylval,wasp::EXECUTION_UNIT_START);
    return token::EXECUTION_UNIT_START;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 117 "JSONLexer.lex"
{
    yy_pop_state(); // pop the execution state
    capture_token(yylval,wasp::EXECUTION_UNIT_END);
    return token::EXECUTION_UNIT_END;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "JSONLexer.lex"
{ // capture the subtraction, return the literal '-'
    yy_pop_state();
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 127 "JSONLexer.lex"
{
    capture_token(yylval,wasp::FILL_EXPR);
    return token::FILLER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 131 "JSONLexer.lex"
{
    capture_token(yylval,wasp::WASP_COMMA);
    return token::COMMA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "JSONLexer.lex"
{
    capture_token(yylval,wasp::COLON);
    return token::COLON;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 139 "JSONLexer.lex"
{
    capture_token(yylval,wasp::LTE);
    return token::LTE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 143 "JSONLexer.lex"
{
    capture_token(yylval,wasp::GTE);
    return token::GTE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "JSONLexer.lex"
{
    capture_token(yylval,wasp::LT);
    return token::LT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 151 "JSONLexer.lex"
{
    capture_token(yylval,wasp::GT);
    return token::GT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 155 "JSONLexer.lex"
{
    capture_token(yylval,wasp::EQ);
    return token::EQ;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 159 "JSONLexer.lex"
{
    capture_token(yylval,wasp::BANG);
    return token::BANG;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 163 "JSONLexer.lex"
{
    capture_token(yylval,wasp::ASSIGN);
    return token::ASSIGN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 167 "JSONLexer.lex"
{
    capture_token(yylval,wasp::NEQ);
    return token::NEQ;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "JSONLexer.lex"
{
    capture_token(yylval,wasp::WASP_AND);
    return token::AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 175 "JSONLexer.lex"
{
    capture_token(yylval,wasp::WASP_OR);
    return token::OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 179 "JSONLexer.lex"
{
    capture_token(yylval,wasp::LBRACKET);
    return token::LBRACKET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 183 "JSONLexer.lex"
{
    capture_token(yylval,wasp::RBRACKET);
    return token::RBRACKET;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "JSONLexer.lex"
{
    capture_token(yylval,wasp::LBRACE);
    return token::LBRACE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 191 "JSONLexer.lex"
{
    capture_token(yylval,wasp::RBRACE);
    return token::RBRACE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 195 "JSONLexer.lex"
{
    capture_token(yylval,wasp::EXPONENT);
    return token::EXPONENT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "JSONLexer.lex"
{
    capture_token(yylval,wasp::MULTIPLY);
    return token::MULTIPLY;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 203 "JSONLexer.lex"
{
  capture_token(yylval,wasp::DIVIDE);
  return token::DIVIDE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 207 "JSONLexer.lex"
{
  capture_token(yylval,wasp::PLUS);
  return token::PLUS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "JSONLexer.lex"
{
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 215 "JSONLexer.lex"
{
  capture_token(yylval,wasp::LPAREN);
  return token::LPAREN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 219 "JSONLexer.lex"
{
 capture_token(yylval,wasp::RPAREN);
 return token::RPAREN;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 "JSONLexer.lex"
{
    yy_push_state(subtraction); // if we have a minus sign immediately following, subtraction is occurring
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 229 "JSONLexer.lex"
{
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "JSONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "JSONLexer.lex"
{
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
/* gobble up white-spaces */
case 32:
YY_RULE_SETUP
#line 246 "JSONLexer.lex"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 251 "JSONLexer.lex"
{
    yylloc->lines(yyleng); yylloc->step();
    interpreter.push_line_offset(file_offset-yyleng);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 256 "JSONLexer.lex"
{
    capture_token(yylval,wasp::QUOTED_STRING);
    return token::QSTRING;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 260 "JSONLexer.lex"
{
    capture_token(yylval,wasp::WASP_TRUE);
    return token::TOKEN_TRUE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 264 "JSONLexer.lex"
{
    capture_token(yylval,wasp::WASP_FALSE);
    return token::TOKEN_FALSE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 269 "JSONLexer.lex"
{
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 273 "JSONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 279 "JSONLexer.lex"
{
    capture_token(yylval,wasp::COMMENT);
    return token::COMMENT;
}
	YY_BREAK
/* pass all other characters up to bison
  * NOTE: references do not support whitespace */
case 40:
YY_RULE_SETUP
#line 286 "JSONLexer.lex"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the wasp lexer rules above ***/
case 41:
YY_RULE_SETUP
#line 292 "JSONLexer.lex"
ECHO;
	YY_BREAK
#line 2851 "JSONLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(subtraction):
case YY_STATE_EOF(execution_unit):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	JSONfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	JSONfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					JSONrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) JSONrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		if ( *yy_cp )
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			}
		else
			yy_current_state = yy_NUL_trans[yy_current_state];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	yy_current_state = yy_NUL_trans[yy_current_state];
	yy_is_jam = (yy_current_state == 0);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) JSONalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) JSONalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		JSONfree((void *) b->yy_ch_buf  );

	JSONfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)JSONalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)JSONrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) JSONalloc(new_size  );

		else
			(yy_start_stack) = (int *) JSONrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *JSONalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *JSONrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void JSONfree (void * ptr )
{
	free( (char *) ptr );	/* see JSONrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 292 "JSONLexer.lex"



namespace wasp {

JSONLexerImpl::JSONLexerImpl(
                AbstractInterpreter & interpreter,
                std::istream* in,
                std::ostream* out)
    : JSONFlexLexer(in, out)
    , interpreter(interpreter)
    , file_offset(0)
{
}

JSONLexerImpl::~JSONLexerImpl()
{
}

void JSONLexerImpl::set_debug(bool b)
{
    yy_flex_debug = b;
}
void JSONLexerImpl::rewind()
{
    yyin->seekg(-yyleng,std::ios_base::cur);
    yyless(0);
}
void JSONLexerImpl::capture_token(
        wasp::JSONParser::semantic_type* yylval
        ,wasp::NODE type)
{
    std::size_t offset = file_offset - yyleng;
    yylval->token_index = interpreter.token_count();
    interpreter.push_token(yytext,type,offset);
}
}

/* This implementation of JSONFlexLexer::yylex() is required to fill the
 * vtable of the class JSONFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the JSONLexerImpl class instead. */

#ifdef yylex
#undef yylex
#endif

int JSONFlexLexer::yylex()
{
    std::cerr << "in JSONFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int JSONFlexLexer::yywrap()
{
    return 1;
}

