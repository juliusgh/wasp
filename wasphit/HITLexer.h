#ifndef WASP_HITLEXER_H
#define WASP_HITLEXER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define YY_DECL                                                \
    wasp::HITParser::token_type wasp::HITLexerImpl::lex( \
        wasp::HITParser::semantic_type* yylval,             \
        wasp::HITParser::location_type* yylloc)
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer HITFlexLexer
#include "waspcore/FlexLexer.h"
#undef yyFlexLexer
#endif

#include "HITParser.hpp"
#include "waspcore/wasp_node.h"
namespace wasp
{
/** HITLexerImpl is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to HITLexer. However we change the context of the generated
 * yylex() function to be contained within the HITLexerImpl class. This is
 * required
 * because the yylex() defined in HITLexer has no parameters. */
class HITLexerImpl : public HITFlexLexer
{
  public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex().
     * The token pool is the storage class
    */
    HITLexerImpl(class AbstractInterpreter& interpreter,
                    std::istream*              arg_yyin  = 0,
                    std::ostream*              arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~HITLexerImpl();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated biHIT parser then
     * calls this virtual function to fetch new tokens. */
    virtual HITParser::token_type lex(HITParser::semantic_type* yylval,
                                         HITParser::location_type* yylloc);

    bool eof() const {return eof_reached;}
    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);
    /**
     * @brief rewind - rewind the last token (yyless(0))
     */
    void rewind();

    void capture_token(wasp::HITParser::semantic_type* yylval,
                       wasp::NODE                         type);

  private:
    class AbstractInterpreter& interpreter;
    std::size_t                file_offset;
    bool                       eof_reached;
};

}  // namespace wasp

#endif  // WASP_HITLEXER_H
