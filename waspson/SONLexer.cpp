#line 2 "SONLexer.cpp"
#line 2 "SONLexer.lex"
/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H




#line 11 "SONLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SONFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *SONalloc (yy_size_t  );
void *SONrealloc (void *,yy_size_t  );
void SONfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "waspcore/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[482] =
    {   0,
        0,    0,    0,    0,    0,    0,   41,   39,   32,   33,
       12,   39,   38,   39,   39,   26,   27,   22,   24,    5,
       25,   39,   23,   29,    6,    9,   13,   10,   37,   37,
       37,   37,   37,   17,   18,   21,   37,   37,   37,   37,
       19,   39,   20,    1,   40,   40,   40,    3,   37,   32,
       14,    0,   34,   38,   15,    0,    0,    0,   29,    0,
       31,   38,   28,   31,   29,    0,    0,    0,    0,    0,
        7,   11,    8,    0,   37,    0,    0,    4,   37,   37,
       36,   37,   37,   37,   37,   37,   37,   37,   16,   37,
        0,   30,    0,   38,   30,   31,    0,    0,    0,   29,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    4,    4,
       37,   37,   37,   37,   37,   35,   37,   37,    2,    0,
        0,    0,   31,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    4,    0,    0,    0,    4,    4,    0,    0,    0,
        0,    4,    0,    0,    0,    4,   37,   37,   37,    0,
        0,    0,   31,    0,    0,    0,   31,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    4,
        0,    0,    4,    0,    4,   37,    0,    0,   31,    0,
       31,    0,    0,   31,    0,    0,    0,    0,    0,    0,
        4,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    4,
        4,   37,    0,   31,    0,    0,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    0,    0,    4,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    4,    0,    0,    0,    4,    0,   31,
        0,    0,    0,    0,    0,    0,    4,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    4,    0,    0,    4,    0,    0,
        4,    0,    4,    0,    0,    4,    0,    4,    0,    0,

        4,    4,    0,    0,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    4,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    0,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    0,    0,    4,    0,    4,    0,    4,    0,    0,
        4,    0,    4,    0,    0,    4,    0,    4,    0,    4,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   24,   24,   25,   26,   27,
       24,   24,   28,   24,   24,   29,   24,   30,   31,   32,
       24,   33,   34,   35,   36,   24,   24,   24,   37,   24,
       38,   39,   40,   41,   24,    1,   42,   24,   24,   25,

       43,   44,   24,   24,   28,   24,   24,   45,   24,   46,
       47,   32,   24,   48,   49,   50,   51,   24,   24,   24,
       52,   24,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    3,    3,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    4,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[488] =
    {   0,
        0, 1121,   50,   51,    0,   37, 1141, 1143,   60, 1143,
     1119, 1133,    0, 1130, 1128, 1143, 1143, 1143, 1143, 1143,
       52,   54, 1119,   66, 1143, 1114, 1113, 1112, 1117,   60,
       46,   56,   64, 1143, 1143, 1143,   70,   58,   72,   76,
     1143, 1077, 1143, 1109, 1143, 1123, 1119, 1143,   85,   99,
     1143, 1121, 1143,    0, 1143, 1117, 1107,   95,  106, 1106,
      108,    0, 1143,  110,    0,  120,  139,  143,  156,  160,
     1143, 1143, 1143, 1108, 1107,  124,  112,  164,  141,  101,
     1106,   81,   93,  103,  114,  147,  126,  135, 1143,  158,
      169, 1143,  173,    0, 1102,  178, 1104, 1100,  179,  183,

      199,  195,  187,  214,  218,  213,  201,  233,  237,  229,
      220,  232,  252,  247,  251,  255, 1099, 1098,  163,  259,
      265,  205,  151,  228,  245, 1100,  257,  249, 1099,  266,
      271,  272,  278,  282, 1095,  290, 1094, 1093,  305,  309,
      311,  304, 1092, 1091,  326,  341,  349,  321, 1090, 1089,
      285,  323,  347, 1088, 1087,  325,  355,  359,  345,  365,
     1086,  358, 1088, 1084,  276,  371,  284,  297,  364, 1083,
      375, 1082,  384,  390,  367,  391,  397,  329,  378,  398,
      402,  404,  408, 1081,  421, 1083, 1079,  413,  428,  417,
      423,  434,  427,  437, 1078,  452, 1080, 1076,  444,  463,

      450,  469, 1075,  447, 1077, 1073,  459,  470,  476,  485,
     1070,  465, 1070, 1063,  486,  481,  377,  494,  496,  492,
      502,  507,  505, 1059,  511, 1055,  514,  515,  521, 1051,
      523,  527, 1050,  528,  537,  538,  542,  554, 1049, 1048,
      526,  544,  558,  564, 1047,  574,  568,  550,  570,  580,
     1045, 1044,  573,  575,  589,  590, 1043,  606,  596,  604,
      610,  594,  616, 1042,  595,  617,  618,  624,  622,  628,
     1041,  626, 1040,  578, 1039,  627,  641,  632,  640,  642,
      645,  649, 1038,  657,  648,  658,  663, 1037,  661, 1035,
      678,  677,  668,  684, 1034,  665, 1027, 1010,  683,  687,

      692,  694,  710,  702,  991,  700,  969,  713,  711,  707,
      719,  944,  709,  946,  914,  723,  728,  725,  727,  751,
      744,  857,  731,  856,  733,  748,  749,  750,  752,  761,
      847,  757,  837,  754,  768,  767,  769,  770,  780,  786,
      774,  782,  836,  783,  792,  793,  830,  797,  820,  799,
      803,  804,  814,  811,  812,  813,  815,  821,  802,  817,
      785,  833,  831,  784,  843,  832,  838,  859,  849,  851,
      855,  846,  865,  773,  853,  772,  877,  869,  740,  888,
      875,  876,  872,  730,  881,  895,  682,  675,  887,  886,
      891,  662,  893,  903,  656,  639,  633,  609,  909,  908,

      907,  608,  593,  926,  577,  896,  557,  911,  925,  913,
      924,  923,  933,  934,  930,  949,  556,  951,  549,  941,
      543,  938,  950,  955,  956,  954,  964,  965,  961,  980,
      533,  516,  972,  973,  968,  510,  498,  982,  978,  981,
      487,  467,  990,  986,  984,  457,  987,  999,  451,  440,
      439, 1011, 1003, 1004, 1000,  430, 1007, 1019,  411,  382,
      337, 1027,  328,  314,  289,  283,  264,  207, 1022, 1023,
     1021,  206,  150, 1031, 1033, 1028,  149,  127,   88,   79,
     1143, 1071, 1075, 1079, 1083,   71, 1086
    } ;

static yyconst flex_int16_t yy_def[488] =
    {   0,
      481,    1,  482,  482,    1,    1,  481,  481,  481,  481,
      481,  483,  484,  481,  485,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  486,  486,
      486,  486,  486,  481,  481,  481,  486,  486,  486,  486,
      481,  481,  481,  481,  481,  483,  485,  481,  486,  481,
      481,  483,  481,  484,  481,  485,  481,  481,  481,  481,
      481,  487,  481,  481,   24,  481,  481,  481,  481,  481,
      481,  481,  481,  486,  486,  486,  481,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  481,  486,
      481,  481,  481,  487,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  486,  486,  486,  486,  486,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  486,  486,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  486,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  486,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
        0,  481,  481,  481,  481,  481,  481
    } ;

static yyconst flex_int16_t yy_nxt[1199] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   29,   29,   29,   30,   29,   29,   31,
       29,   29,   29,   29,   32,   29,   33,   34,    8,   35,
       36,   29,   29,   37,   29,   38,   29,   29,   29,   39,
       29,   40,   41,   42,   43,   46,   46,   44,   47,   47,
       74,   50,   49,   50,   48,   48,   57,   58,   60,   59,
       74,   61,   74,   75,   76,   77,   81,   78,   74,   49,
       63,   64,   79,   65,   76,   77,   74,   78,   82,   84,
       74,   66,   81,   67,   68,   74,  480,   69,   70,   74,

       50,   80,   50,   83,   81,  480,   85,   74,   66,   60,
       68,   86,   61,   70,   90,   74,  124,   74,   88,   87,
       63,   64,   92,   59,   95,   61,  118,   96,   74,  119,
       90,   66,   98,   93,   99,   97,  126,  100,  117,   77,
       74,   78,  101,  125,  478,  123,  105,  101,   66,   74,
       93,  105,   97,  102,  103,   74,  104,  106,  107,  109,
      108,   74,  126,  113,  109,   74,  478,  473,  113,  122,
      110,  111,   74,  112,  114,  115,  128,  116,   74,  120,
      119,   78,  129,  126,   58,  131,   91,  132,  160,  121,
      133,  127,   92,  135,  130,   96,  136,   63,   64,  168,

      100,  138,  101,  134,  139,  160,  121,  101,   97,  137,
      103,  130,  104,  102,  103,  144,  104,  140,  145,   74,
      134,  105,  140,  473,  468,   97,  105,  143,  107,  141,
      108,  104,  106,  107,  150,  108,  146,  151,  167,  142,
      109,  146,   74,  149,  111,  109,  112,  152,  147,  112,
      108,  110,  111,  126,  112,  113,  142,  153,  148,   74,
      113,  154,  115,   74,  116,  155,  114,  115,  156,  116,
      157,   74,  116,  161,  153,  148,  162,  164,  170,  165,
      158,  468,  166,  171,  163,  172,  172,  126,  133,  173,
      224,  126,   92,  225,  175,  133,  176,  158,   74,  177,

      466,  163,  151,  174,   92,  169,  466,  136,  140,   81,
      202,   74,  140,  140,  140,  178,  187,  140,  188,  140,
      174,  189,  139,  181,  182,  184,  183,  202,  185,  146,
      180,  464,  178,  198,  146,  199,  186,  203,  200,   81,
      204,  233,  156,  145,  146,  464,  234,  180,  205,  146,
      210,  191,  146,  186,  462,  192,  193,  146,  194,  206,
       77,  207,  159,  195,  208,  205,  196,  210,  191,  211,
      217,  214,  212,  215,  197,  162,  216,  218,   74,  219,
      213,  230,  220,  221,  177,   74,  120,  217,  166,  273,
       58,  197,  171,  103,  274,  179,  226,  213,   92,  460,

      221,  173,  228,  235,  132,  230,   81,  229,  231,  227,
      236,   92,  237,  226,  177,  238,  239,  182,  240,  183,
      235,  241,  232,  242,  140,  183,  227,  245,  460,  140,
      246,  140,  107,  243,  190,  248,  140,  249,  185,  232,
      250,  252,  247,  141,  253,  189,  244,  457,  251,  193,
      243,  194,  254,  186,  194,  146,  452,  450,  257,  247,
      146,  258,  255,  244,  204,  111,  146,  201,  450,  196,
      186,  146,  263,  264,  447,  259,  265,  256,  147,  255,
      200,  260,  212,  261,  442,  152,  262,  208,  197,  263,
      270,  115,  259,  209,  256,  205,  157,  267,  216,  268,

      271,  266,  269,  272,  442,  197,  213,  270,  275,  220,
      275,  220,  205,  276,  278,  437,  279,  277,  266,  280,
      120,  224,  223,  213,  281,   74,  283,  437,  225,  172,
      163,  284,  229,  432,  277,   92,  282,   92,  229,  286,
      231,  176,   92,  241,  287,  234,  227,  163,  285,  288,
      432,  294,  290,  282,  289,  238,  290,  140,  295,  291,
      422,  296,  140,  227,  307,  285,  420,  250,  294,  297,
      298,  238,  299,  418,  408,  300,  301,  140,  302,  292,
      305,  303,  140,  146,  307,  306,  297,  308,  146,  312,
      253,  246,  313,   77,  406,  274,  292,  250,  311,  304,

      314,  315,  318,  316,  319,  309,  317,  320,  322,  146,
      404,  262,  265,  323,  146,  311,  304,  314,  324,  326,
      330,  262,  309,  258,  324,  402,  398,  325,  327,  331,
      328,  321,  333,  329,  332,  269,  326,  330,  333,  269,
      336,  334,  337,  272,  276,  338,  343,  335,  321,  280,
      398,  339,  340,  341,  343,  219,  396,  344,  342,  280,
      349,  347,  281,   74,  335,  350,  348,  345,  339,  340,
      346,   92,  230,  396,  284,  287,  103,   92,  289,  393,
      287,  140,  296,  182,  345,  293,  140,  346,  285,  352,
      358,  237,  388,  354,  353,  291,  355,  359,  356,  388,

      360,  357,  242,  351,  300,  285,  361,  358,  361,  303,
      354,  362,  297,  140,  364,  107,  146,  306,  140,  365,
      351,  146,  193,  367,  310,  249,  313,  303,  368,  297,
      308,  370,  369,  371,  373,  363,  372,  374,  366,  376,
      375,  376,  320,  254,  377,  317,  111,  385,  323,  369,
      325,  373,  363,  314,  146,  366,  379,  380,  381,  146,
      382,  380,  261,  384,  384,  383,  329,  385,  320,  329,
      314,  334,  115,  387,  332,  381,  378,  386,  388,  389,
      390,  392,  268,  392,  338,  391,  393,  338,  275,  377,
      375,  342,  395,  378,  386,  394,  389,  396,  397,  342,

      344,  365,  362,  398,  400,  347,  279,  340,  399,  401,
      402,   74,  394,   92,  348,  403,  350,  140,  290,  360,
      404,  353,  140,  405,  340,  399,  407,  407,  406,  357,
      408,  353,  357,  410,  360,  411,  140,  350,  412,  351,
      409,  140,  413,  415,  417,  302,  140,  402,  416,  418,
      362,  140,  307,  344,  334,  368,  351,  409,  414,  413,
      365,  419,  146,  372,  332,  421,  420,  146,  372,  421,
      375,  423,  422,  325,  323,  414,  368,  424,  427,  425,
      146,  429,  426,  319,  366,  146,  430,  431,  423,  383,
      324,  146,  432,  383,  377,  427,  146,  381,  385,  436,

      333,  366,  428,  391,  437,  380,  433,  434,  391,  328,
      393,  182,  435,  406,  381,  439,  389,  337,  438,  428,
      440,  441,  343,  433,  401,  401,  442,  446,  408,  140,
      412,  317,  399,  389,  140,  438,  443,  444,  446,  356,
      412,  447,  445,  404,  361,  449,  451,  416,  448,  399,
      450,  452,  140,  443,  146,  422,  193,  140,  420,  146,
      316,  313,  454,  453,  371,  448,  416,  455,  418,  456,
      456,  426,  426,  457,  414,  376,  459,  461,  430,  458,
      453,  460,  462,  146,  463,  435,  308,  384,  146,  464,
      435,  414,  392,  433,  465,  440,  458,  430,  440,  466,

      407,  445,  467,  445,  447,  428,  438,  468,  306,  443,
      433,  470,  469,  411,  140,  472,  471,  455,  421,  140,
      473,  455,  428,  438,  457,  453,  443,  300,  452,  469,
      146,  475,  474,  425,  477,  146,  476,  446,  471,  478,
      471,  299,  453,  479,  462,  476,  469,  456,  480,  474,
      476,  296,  291,  474,  289,  284,  276,  274,  272,  265,
      258,  253,  310,  469,  246,  241,  293,  234,  231,  165,
      474,   45,   45,   45,   45,   52,  281,   52,   52,   54,
      216,   54,   54,   56,  215,   56,   94,  212,   94,   94,
      208,  207,  204,  200,  199,  196,  189,  188,  185,  173,

      171,  223,  222,  162,  156,  209,  151,  201,  145,  190,
      139,  179,  136,   74,   74,  119,  159,  100,   99,   96,
       74,   74,  481,   61,   91,   53,   53,   53,   53,   72,
       89,   74,   73,   72,   71,   62,   53,   55,   53,   51,
      481,   44,    7,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481

    } ;

static yyconst flex_int16_t yy_chk[1199] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    6,    3,    4,
       31,    9,    6,    9,    3,    4,   21,   21,   22,   21,
       32,   22,   38,  486,   30,   30,   31,   30,   33,    6,
       24,   24,   30,   24,   37,   37,   39,   37,   32,   33,
       40,   24,   31,   24,   24,   82,  480,   24,   24,   49,

       50,   30,   50,   32,   38,  479,   33,   83,   24,   58,
       24,   37,   58,   24,   49,   80,   82,   84,   40,   39,
       59,   59,   61,   59,   64,   61,   77,   64,   85,   77,
       49,   59,   66,   61,   66,   64,   84,   66,   76,   76,
       87,   76,   67,   83,  478,   80,   68,   67,   59,   88,
       61,   68,   64,   67,   67,   79,   67,   68,   68,   69,
       68,   86,   85,   70,   69,  123,  477,  473,   70,   79,
       69,   69,   90,   69,   70,   70,   87,   70,   78,   78,
      119,   78,   90,   88,   91,   93,   91,   93,  119,   78,
       93,   86,   96,   99,   91,   96,   99,  100,  100,  123,

      100,  103,  101,   96,  103,  119,   78,  101,  100,  102,
      102,   91,  102,  101,  101,  107,  101,  104,  107,  122,
       96,  105,  104,  472,  468,  100,  105,  106,  106,  104,
      106,  104,  105,  105,  111,  105,  108,  111,  122,  104,
      109,  108,  124,  110,  110,  109,  110,  112,  108,  112,
      108,  109,  109,  124,  109,  113,  104,  112,  108,  125,
      113,  114,  114,  128,  114,  115,  113,  113,  115,  113,
      116,  127,  116,  120,  112,  108,  120,  121,  130,  121,
      116,  467,  121,  130,  120,  131,  132,  125,  131,  132,
      165,  128,  133,  165,  134,  133,  134,  116,  167,  134,

      466,  120,  151,  133,  136,  127,  465,  136,  139,  167,
      151,  168,  140,  139,  141,  136,  142,  140,  142,  141,
      133,  142,  139,  140,  140,  141,  140,  151,  141,  145,
      139,  464,  136,  148,  145,  148,  141,  152,  148,  168,
      152,  178,  156,  145,  146,  463,  178,  139,  152,  146,
      156,  145,  147,  141,  461,  146,  146,  147,  146,  153,
      159,  153,  159,  147,  153,  152,  147,  156,  145,  157,
      159,  158,  157,  158,  147,  162,  158,  160,  169,  160,
      157,  175,  160,  162,  175,  166,  166,  159,  166,  217,
      171,  147,  171,  179,  217,  179,  166,  157,  173,  460,

      162,  173,  174,  179,  174,  176,  169,  174,  176,  173,
      180,  177,  180,  166,  177,  180,  181,  181,  182,  181,
      179,  182,  177,  183,  185,  183,  173,  188,  459,  185,
      188,  189,  190,  183,  190,  191,  189,  191,  185,  177,
      191,  193,  190,  189,  193,  189,  185,  456,  192,  192,
      183,  192,  194,  189,  194,  196,  451,  450,  199,  190,
      196,  199,  194,  185,  204,  201,  200,  201,  449,  196,
      189,  200,  204,  207,  446,  201,  207,  196,  200,  194,
      200,  202,  212,  202,  442,  208,  202,  208,  200,  204,
      212,  209,  201,  209,  196,  208,  216,  210,  216,  210,

      215,  209,  210,  215,  441,  200,  216,  212,  218,  220,
      219,  218,  208,  219,  221,  437,  221,  220,  209,  221,
      223,  222,  223,  216,  222,  225,  227,  436,  225,  228,
      223,  227,  228,  432,  220,  229,  225,  231,  229,  232,
      231,  232,  234,  241,  232,  234,  229,  223,  231,  235,
      431,  241,  236,  225,  235,  236,  237,  238,  242,  237,
      421,  242,  238,  229,  248,  231,  419,  248,  241,  242,
      243,  238,  243,  417,  407,  243,  244,  246,  244,  238,
      247,  244,  246,  250,  249,  247,  242,  249,  250,  254,
      253,  246,  254,  274,  405,  274,  238,  250,  253,  246,

      254,  255,  256,  255,  256,  250,  255,  256,  259,  258,
      403,  262,  265,  259,  258,  253,  246,  254,  260,  262,
      265,  260,  250,  258,  261,  402,  398,  261,  263,  266,
      263,  258,  267,  263,  266,  267,  262,  265,  268,  269,
      270,  268,  270,  272,  276,  270,  278,  269,  258,  278,
      397,  272,  276,  277,  279,  277,  396,  279,  277,  280,
      285,  282,  281,  282,  269,  285,  282,  280,  272,  276,
      281,  284,  286,  395,  284,  286,  289,  287,  289,  392,
      287,  291,  296,  293,  280,  293,  291,  281,  287,  292,
      296,  292,  388,  293,  292,  291,  294,  299,  294,  387,

      299,  294,  300,  291,  300,  287,  301,  296,  302,  301,
      293,  302,  300,  303,  304,  306,  308,  306,  303,  304,
      291,  308,  310,  309,  310,  309,  313,  303,  309,  300,
      308,  311,  310,  311,  313,  303,  311,  316,  308,  318,
      316,  319,  318,  317,  319,  317,  323,  384,  323,  310,
      325,  313,  303,  317,  320,  308,  321,  379,  325,  320,
      326,  321,  326,  327,  328,  326,  327,  328,  320,  329,
      317,  334,  332,  330,  332,  325,  320,  329,  330,  334,
      335,  336,  335,  337,  336,  335,  337,  338,  341,  376,
      374,  341,  339,  320,  329,  338,  334,  339,  340,  342,

      344,  364,  361,  340,  345,  346,  345,  342,  344,  345,
      346,  348,  338,  350,  348,  351,  350,  353,  352,  359,
      351,  352,  353,  354,  342,  344,  355,  356,  354,  355,
      356,  353,  357,  358,  360,  358,  362,  349,  358,  353,
      357,  362,  360,  363,  366,  363,  365,  347,  363,  366,
      362,  365,  367,  343,  333,  367,  353,  357,  362,  360,
      365,  369,  368,  372,  331,  370,  369,  368,  370,  371,
      375,  372,  371,  324,  322,  362,  368,  373,  375,  373,
      377,  378,  373,  378,  368,  377,  378,  381,  372,  383,
      382,  380,  381,  382,  377,  375,  380,  383,  385,  389,

      390,  368,  377,  390,  389,  380,  385,  386,  391,  386,
      393,  406,  386,  406,  383,  394,  391,  394,  393,  377,
      394,  399,  400,  385,  401,  400,  399,  410,  408,  404,
      410,  315,  401,  391,  404,  393,  408,  409,  411,  409,
      412,  411,  409,  404,  415,  413,  414,  415,  412,  401,
      413,  414,  416,  408,  418,  422,  420,  416,  420,  418,
      314,  312,  423,  422,  423,  412,  416,  423,  418,  424,
      425,  426,  424,  425,  416,  429,  427,  428,  429,  426,
      422,  427,  428,  430,  433,  435,  307,  434,  430,  433,
      434,  416,  439,  435,  438,  439,  426,  430,  440,  438,

      444,  445,  443,  444,  447,  430,  440,  443,  305,  445,
      435,  448,  447,  448,  452,  453,  448,  455,  454,  452,
      453,  454,  430,  440,  457,  455,  445,  298,  452,  447,
      462,  458,  457,  458,  469,  462,  458,  470,  471,  469,
      470,  297,  455,  474,  462,  476,  471,  475,  474,  457,
      475,  295,  290,  476,  288,  283,  275,  273,  271,  264,
      257,  252,  251,  471,  245,  240,  239,  233,  230,  226,
      476,  482,  482,  482,  482,  483,  224,  483,  483,  484,
      214,  484,  484,  485,  213,  485,  487,  211,  487,  487,
      206,  205,  203,  198,  197,  195,  187,  186,  184,  172,

      170,  164,  163,  161,  155,  154,  150,  149,  144,  143,
      138,  137,  135,  129,  126,  118,  117,   98,   97,   95,
       81,   75,   74,   60,   57,   56,   52,   47,   46,   44,
       42,   29,   28,   27,   26,   23,   15,   14,   12,   11,
        7,    2,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SONLexer.lex"

#line 8 "SONLexer.lex"

#include <string>
#include <sstream>
#include "SONLexer.h"

/* import the parser's token type into a local typedef */
typedef wasp::SONParser::token token;
typedef wasp::SONParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SONFlexLexer" */
/*%option yyclass="wasp::SONLexerImpl"*/
/* enable scanner to generate debug output. disable this for release
* versions. */
/*%option debug*/
/* no support for include files is planned */
/* enables the use of start condition stacks */


/* !!! The string allows hyphens (not trailing hyphens)!!! */
/* This string does not allow special characters '-','/'
*  and should only occur in the context of reference
*/
/*
* The 'execution unit' is a rebranded SCALE sequence construct
* where the sequence started with the unit_start rule below
* and terminated with unit_end rule below.
* We reproduce it here to account for the input construct
* while in transition...
*/
/* The following paragraph suffices to track locations accurately. Each time
* yylex is invoked, the begin position is moved onto the end position. */
#line 101 "SONLexer.lex"
#define YY_USER_ACTION  yylloc->columns(yyleng); file_offset+=yyleng;
#line 877 "SONLexer.cpp"

#define INITIAL 0
#define subtraction 1
#define execution_unit 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 104 "SONLexer.lex"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();

 /*** BEGIN EXAMPLE - Change the wasp lexer rules below ***/

#line 992 "SONLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1143 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 113 "SONLexer.lex"
{
    yy_push_state(execution_unit); // enter the 'unit' of execution
        capture_token(yylval,wasp::EXECUTION_UNIT_START);
    return token::EXECUTION_UNIT_START;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 118 "SONLexer.lex"
{
    yy_pop_state(); // pop the execution state
    capture_token(yylval,wasp::EXECUTION_UNIT_END);
    return token::EXECUTION_UNIT_END;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "SONLexer.lex"
{ // capture the subtraction, return the literal '-'
    yy_pop_state();
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 128 "SONLexer.lex"
{
    capture_token(yylval,wasp::FILL_EXPR);
    return token::FILLER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_COMMA);
    return token::COMMA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "SONLexer.lex"
{
    capture_token(yylval,wasp::COLON);
    return token::COLON;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 140 "SONLexer.lex"
{
    capture_token(yylval,wasp::LTE);
    return token::LTE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "SONLexer.lex"
{
    capture_token(yylval,wasp::GTE);
    return token::GTE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 148 "SONLexer.lex"
{
    capture_token(yylval,wasp::LT);
    return token::LT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 152 "SONLexer.lex"
{
    capture_token(yylval,wasp::GT);
    return token::GT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 156 "SONLexer.lex"
{
    capture_token(yylval,wasp::EQ);
    return token::EQ;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 160 "SONLexer.lex"
{
    capture_token(yylval,wasp::BANG);
    return token::BANG;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 164 "SONLexer.lex"
{
    capture_token(yylval,wasp::ASSIGN);
    return token::ASSIGN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 168 "SONLexer.lex"
{
    capture_token(yylval,wasp::NEQ);
    return token::NEQ;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_AND);
    return token::AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 176 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_OR);
    return token::OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 180 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACKET);
    return token::LBRACKET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 184 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACKET);
    return token::RBRACKET;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 188 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACE);
    return token::LBRACE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 192 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACE);
    return token::RBRACE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 196 "SONLexer.lex"
{
    capture_token(yylval,wasp::EXPONENT);
    return token::EXPONENT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 200 "SONLexer.lex"
{
    capture_token(yylval,wasp::MULTIPLY);
    return token::MULTIPLY;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 204 "SONLexer.lex"
{
  capture_token(yylval,wasp::DIVIDE);
  return token::DIVIDE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 208 "SONLexer.lex"
{
  capture_token(yylval,wasp::PLUS);
  return token::PLUS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 212 "SONLexer.lex"
{
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 216 "SONLexer.lex"
{
  capture_token(yylval,wasp::LPAREN);
  return token::LPAREN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 220 "SONLexer.lex"
{
 capture_token(yylval,wasp::RPAREN);
 return token::RPAREN;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 225 "SONLexer.lex"
{
    yy_push_state(subtraction); // if we have a minus sign immediately following, subtraction is occurring
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 230 "SONLexer.lex"
{
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "SONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 242 "SONLexer.lex"
{
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
/* gobble up white-spaces */
case 32:
YY_RULE_SETUP
#line 247 "SONLexer.lex"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 252 "SONLexer.lex"
{
    yylloc->lines(yyleng); yylloc->step();
    m_token_data.push_line(file_offset-yyleng);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 257 "SONLexer.lex"
{
    capture_token(yylval,wasp::QUOTED_STRING);
    return token::QSTRING;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 261 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_TRUE);
    return token::TOKEN_TRUE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 265 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_FALSE);
    return token::TOKEN_FALSE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 270 "SONLexer.lex"
{
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 274 "SONLexer.lex"
{
    capture_token(yylval,wasp::COMMENT);
    return token::COMMENT;
}
	YY_BREAK
/* pass all other characters up to bison
  * NOTE: references do not support whitespace */
case 39:
YY_RULE_SETUP
#line 281 "SONLexer.lex"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the wasp lexer rules above ***/
case 40:
YY_RULE_SETUP
#line 287 "SONLexer.lex"
ECHO;
	YY_BREAK
#line 1411 "SONLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(subtraction):
case YY_STATE_EOF(execution_unit):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SONfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SONfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SONrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SONrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 481);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SONalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SONalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SONfree((void *) b->yy_ch_buf  );

	SONfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SONalloc(new_size  );

		else
			(yy_start_stack) = (int *) SONrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SONalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SONrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SONfree (void * ptr )
{
	free( (char *) ptr );	/* see SONrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "SONLexer.lex"



namespace wasp {

SONLexerImpl::SONLexerImpl(
                TokenPool<> & token_data,
                std::istream* in,
                std::ostream* out)
    : SONFlexLexer(in, out)
    , m_token_data(token_data)
    , file_offset(0)
{
}

SONLexerImpl::~SONLexerImpl()
{
}

void SONLexerImpl::set_debug(bool b)
{
    yy_flex_debug = b;
}
void SONLexerImpl::rewind()
{
    yyin->seekg(-yyleng,std::ios_base::cur);
    yyless(0);
}
void SONLexerImpl::capture_token(
        wasp::SONParser::semantic_type* yylval
        ,wasp::NODE type)
{
    size_t offset = file_offset - yyleng;
    yylval->node_index = m_token_data.size();
    m_token_data.push(yytext,type,offset);
}
}

/* This implementation of SONFlexLexer::yylex() is required to fill the
 * vtable of the class SONFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SONLexerImpl class instead. */

#ifdef yylex
#undef yylex
#endif

int SONFlexLexer::yylex()
{
    std::cerr << "in SONFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SONFlexLexer::yywrap()
{
    return 1;
}

