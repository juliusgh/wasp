#line 2 "SONLexer.cpp"
#line 2 "SONLexer.lex"
/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H




#line 11 "SONLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SONFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *SONalloc (yy_size_t  );
void *SONrealloc (void *,yy_size_t  );
void SONfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "waspcore/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[479] =
    {   0,
        0,    0,    0,    0,    0,    0,   38,   36,   29,   30,
       11,   36,   35,   36,   36,   23,   24,   19,   21,    5,
       22,   36,   20,   26,    8,   12,    9,   34,   34,   34,
       34,   34,   16,   17,   18,   34,   34,   34,   34,   36,
        1,   37,   37,   37,    3,   34,   29,   13,    0,   31,
       35,   14,    0,    0,    0,   26,    0,   28,   35,   25,
       28,   26,    0,    0,    0,    0,    0,    6,   10,    7,
        0,   34,    0,    0,    4,   34,   34,   33,   34,   34,
       34,   34,   34,   34,   34,   15,   34,    0,   27,    0,
       35,   27,   28,    0,    0,    0,   26,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    4,    4,   34,   34,   34,
       34,   34,   32,   34,   34,    2,    0,    0,    0,   28,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,    4,    0,
        0,    0,    4,    4,    0,    0,    0,    0,    4,    0,
        0,    0,    4,   34,   34,   34,    0,    0,    0,   28,
        0,    0,    0,   28,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        4,    0,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    4,
        0,    4,   34,    0,    0,   28,    0,   28,    0,    0,
       28,    0,    0,    0,    0,    0,    0,    4,    4,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
        4,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    4,    4,   34,    0,
       28,    0,    0,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    0,
        4,    0,    0,    0,    4,    0,    0,    0,    4,    0,
        4,    0,    0,    0,    4,    0,   28,    0,    0,    0,
        0,    0,    0,    4,    0,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    4,    0,    0,    4,    0,    0,    4,    0,    4,
        0,    0,    4,    0,    4,    0,    0,    4,    4,    0,

        0,    0,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    4,    0,
        0,    4,    0,    4,    0,    0,    4,    0,    4,    0,
        0,    4,    0,    4,    0,    0,    4,    0,    0,    0,
        0,    4,    0,    4,    0,    0,    4,    0,    0,    0,
        4,    0,    4,    0,    4,    0,    0,    4,    0,    4,
        0,    0,    4,    0,    4,    0,    4,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,    1,   22,   23,   23,   24,   25,   26,
       23,   23,   27,   23,   23,   28,   23,   29,   30,   31,
       23,   32,   33,   34,   35,   23,   23,   23,   36,   23,
       37,   38,   39,   40,   23,    1,   41,   23,   23,   24,

       42,   43,   23,   23,   27,   23,   23,   44,   23,   45,
       46,   31,   23,   47,   48,   49,   50,   23,   23,   23,
       51,   23,    1,   52,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    3,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    4,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1
    } ;

static yyconst flex_int16_t yy_base[485] =
    {   0,
        0, 1119,   47,   48,    0,   35, 1138, 1140,   57, 1140,
     1117, 1130,    0, 1127, 1125, 1140, 1140, 1140, 1140, 1140,
       49,   51, 1116,   63, 1112, 1111, 1110, 1114,   58,   55,
       57,   67, 1140, 1140, 1140,   82,   56,   68,   69, 1076,
     1107, 1140, 1120, 1116, 1140,   88,  104, 1140, 1118, 1140,
        0, 1140, 1114, 1104,   78,  103, 1103,  107,    0, 1140,
      109,    0,  122,  132,  148,  152,  156, 1140, 1140, 1140,
     1105, 1104,   98,  111,  160,  115,   43, 1103,  123,  105,
       53,  129,  138,  131,  139, 1140,  164,  168, 1140,  176,
        0, 1099,  165, 1101, 1097,  124,  180,  188,  193,  144,

      208,  212,  216,  200,  231,  237,  221,  205,  226,  254,
      244,  230,  249, 1096, 1095,  236,  261,  262,  186,  223,
      267,  158, 1097,  242,  251, 1096,  270,  266,  279,  280,
      286, 1092,  291, 1091, 1090,  303,  309,  311,  317, 1089,
     1088,  330,  334,  342,  329, 1087, 1086,  336,  341,  350,
     1085, 1084,  344,  355,  361,  369,  375, 1083,  357, 1085,
     1081,  293,  380,  285,  272,  281, 1080,  301, 1079,  385,
      389,  322,  374,  391,  395,  396,  402,  408,  410,  414,
     1078,  425, 1080, 1076,  422,  437,  426,  434,  442,  430,
      445, 1075,  455, 1077, 1071,  451,  467,  456,  471, 1068,

      457, 1067, 1060,  473,  477,  478,  492, 1053,  483, 1055,
     1051,  496,  488,  418,  497,  503,  498,  509,  511,  516,
     1050,  513, 1052,  524,  518,  528, 1048,  529,  544, 1047,
      530,  538,  534,  545,  557, 1046, 1045,  547,  549,  563,
      570, 1043,  575,  555,  562,  572,  588, 1042, 1041,  576,
      580,  589,  596, 1040,  606,  590,  601,  605,  603,  614,
     1039,  608,  621,  620,  622,  618,  629, 1038,  628, 1036,
      633, 1035,  634,  643,  639,  647,  646,  648,  654, 1033,
      659,  650,  660,  664, 1008,  665,  993,  676,  678,  679,
      685,  985,  674,  972,  958,  669,  689,  693,  694,  711,

      704,  930,  707,  929,  715,  717,  721,  729,  895,  709,
      882,  861,  695,  725,  730,  734,  750,  742,  843,  710,
      837,  740,  751,  755,  756,  754,  743,  820,  760,  808,
      759,  768,  770,  772,  773,  776,  782,  784,  779,  791,
      785,  793,  794,  787,  798,  775,  799,  805,  804,  816,
      811,  813,  815,  814,  822,  762,  818,  744,  841,  829,
      720,  844,  833,  834,  859,  851,  839,  852,  847,  858,
      684,  856,  668,  878,  873,  637,  876,  877,  860,  874,
      623,  875,  889,  607,  594,  892,  891,  890,  578,  893,
      906,  568,  551,  532,  521,  909,  908,  911,  517,  499,

      921,  482,  896,  472,  913,  927,  919,  926,  925,  915,
      933,  934,  950,  460,  952,  459,  942,  447,  939,  956,
      947,  948,  954,  960,  964,  965,  980,  436,  417,  972,
      973,  968,  401,  400,  981,  982,  977,  383,  373,  988,
      989,  990,  363,  991,  999,  359,  353,  346, 1009, 1007,
     1006, 1005,  340, 1010, 1016,  323,  313,  284, 1032,  271,
      267,  246,  225,  211,  207, 1024, 1025, 1020,  196,  195,
     1026, 1031, 1030,  181,  151,  113,   94, 1140, 1072, 1076,
     1080, 1084,   72, 1087
    } ;

static yyconst flex_int16_t yy_def[485] =
    {   0,
      478,    1,  479,  479,    1,    1,  478,  478,  478,  478,
      478,  480,  481,  478,  482,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  483,  483,  483,
      483,  483,  478,  478,  478,  483,  483,  483,  483,  478,
      478,  478,  480,  482,  478,  483,  478,  478,  480,  478,
      481,  478,  482,  478,  478,  478,  478,  478,  484,  478,
      478,   24,  478,  478,  478,  478,  478,  478,  478,  478,
      483,  483,  483,  478,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  478,  483,  478,  478,  478,
      484,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  483,  483,  483,  483,  483,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  483,  483,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  483,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  483,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,    0,  478,  478,
      478,  478,  478,  478
    } ;

static yyconst flex_int16_t yy_nxt[1193] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   28,   28,   28,   29,   28,   28,   30,   28,
       28,   28,   28,   31,   28,   32,   33,    8,   34,   35,
       28,   28,   36,   28,   37,   28,   28,   28,   38,   28,
       39,   40,   43,   43,   41,   44,   44,   71,   47,   46,
       47,   45,   45,   54,   55,   57,   56,   71,   58,   71,
       71,   71,   73,   74,   72,   75,   46,   60,   61,   76,
       62,   71,   71,   71,   78,  123,  120,   63,   79,   64,
       65,   81,   57,   66,   67,   58,   73,   74,   77,   75,

       78,   78,   71,   80,   63,   47,   65,   47,   82,   67,
       85,  477,  114,   74,   84,   75,   87,   60,   61,   71,
       56,   89,   83,   92,   58,  115,   93,   63,  116,   71,
      477,   90,   87,   94,   95,   98,   96,   71,  132,   97,
       98,  133,  119,   71,   63,   71,   99,  100,   90,  101,
       94,  102,   71,   71,  122,  106,  102,  121,  135,  110,
      106,  136,  103,  104,  110,  105,  107,  108,  475,  109,
      111,  112,   71,  113,   71,  117,  123,   75,   71,   89,
      125,  124,   93,   55,  118,   88,  123,  126,  128,  131,
      129,   98,  127,  130,   60,   61,   98,   97,  475,  123,

       71,  118,   99,  100,   94,  101,  131,  134,  100,  127,
      101,  137,  470,  470,  141,  102,  137,  142,  164,  147,
      102,   94,  148,  138,  465,  101,  103,  104,  465,  105,
      140,  104,  139,  105,  143,  146,  108,   71,  109,  143,
      106,  149,  463,  109,  152,  106,  144,  153,  105,  139,
      150,  107,  108,  116,  109,  145,   71,  110,  151,  112,
      157,  113,  110,  463,  154,   71,  113,  150,  111,  112,
      165,  113,  145,  155,  161,  158,  162,  157,  159,  163,
      169,   71,  167,  130,  461,  160,   71,  168,  461,  166,
      155,  123,  123,  169,   89,   71,  170,  130,  172,   71,

      173,  459,  160,  174,  171,   89,  137,  221,  133,   78,
      222,  137,  137,   78,  137,  175,   55,  137,  168,  137,
      136,  171,   78,  178,  179,  181,  180,  177,  182,  184,
      457,  185,  175,  143,  186,  183,  227,  143,  143,  174,
      457,  195,  143,  196,  177,  143,  197,  142,  189,  190,
      143,  191,  183,  148,  188,  200,  192,  454,  201,  193,
      199,  153,  203,  449,  204,  202,  194,  205,  207,  208,
      447,  188,  209,  211,  159,  212,  447,  199,  213,  210,
      444,  218,  202,  194,   74,  207,  156,  215,  227,  216,
      439,  228,  217,  214,   71,  117,  210,  163,  218,   89,

      439,  225,  170,  129,  223,   89,  226,  230,  174,  224,
      214,  100,  231,  176,  233,  229,  234,  434,  434,  235,
      232,  223,  236,  179,  237,  180,  224,  238,  137,  239,
      270,  180,  229,  137,  429,  271,  242,  232,  240,  243,
      137,  104,  182,  187,  249,  137,  245,  250,  246,  241,
      244,  247,  138,  429,  186,  240,  248,  190,  143,  191,
      251,  183,  191,  143,  419,  254,  241,  244,  255,  252,
      143,  108,  193,  198,  201,  143,  417,  415,  183,  253,
      256,  260,  144,  257,  197,  258,  252,  261,  259,  405,
      262,  194,  149,  112,  205,  206,  253,  256,  260,  403,

      209,  202,  263,  154,  264,  213,  265,  267,  194,  266,
      268,  272,  210,  269,  217,  217,  401,  272,  202,  263,
      273,  275,  274,  276,  267,  221,  277,   71,  278,  210,
      222,  117,  169,  220,  399,  226,  280,  279,  395,  274,
      160,  281,   89,   89,   89,  226,  228,  231,  287,  395,
      285,  235,  224,  282,  279,  286,  283,  160,  173,  287,
      137,  284,  288,  292,  238,  137,  293,  302,  393,  224,
      282,  291,  303,  294,  235,  295,  304,  296,  137,  247,
      297,  289,  298,  137,  299,  393,  304,  300,  291,  305,
      294,  143,  243,  250,  309,  390,  143,  310,  289,  301,

      308,  312,  319,  313,  311,  247,  314,  320,  315,  143,
      316,  385,  306,  317,  143,  321,  301,  308,  259,  321,
      259,  311,  322,  255,  385,  262,  324,  323,  325,  306,
      318,  326,  327,  328,  330,  266,  330,  266,  329,  331,
      382,  333,  332,  334,  323,  269,  335,  318,   74,  327,
      271,  273,  336,  340,  377,  338,  277,  216,  337,  332,
      339,  340,  346,  277,  341,  278,  344,  347,   71,  336,
      342,  345,  343,   89,  227,  337,  281,  284,   89,  137,
      100,  284,  286,  356,  137,  374,  357,  342,  282,  343,
      349,  293,  234,  288,  179,  350,  290,  352,  355,  353,

      348,  372,  354,  351,  239,  282,  297,  358,  358,  371,
      300,  359,  372,  294,  137,  355,  361,  348,  143,  137,
      351,  362,  104,  143,  303,  108,  310,  320,  300,  364,
      294,  246,  305,  370,  365,  360,  190,  362,  307,  363,
      251,  367,  314,  368,  373,  366,  369,  317,  373,  311,
      370,  374,  360,  143,  376,  384,  363,  322,  143,  377,
      385,  359,  366,  379,  378,  258,  311,  317,  380,  381,
      381,  326,  326,  382,  375,  112,  331,  329,  383,  357,
      387,  378,  265,  386,  389,  388,  389,  335,  392,  390,
      335,  375,  347,  393,  394,  383,  339,  391,  272,  395,

      386,  339,  341,  337,  399,  397,  344,  276,  341,  396,
      398,  399,   71,   89,  391,  345,  347,  400,  287,  137,
      337,  350,  401,  402,  137,  331,  396,  404,  403,  404,
      354,  354,  405,  350,  407,  357,  408,  329,  406,  409,
      348,  412,  410,  299,  137,  414,  413,  137,  304,  137,
      415,  365,  137,  418,  322,  406,  369,  348,  359,  410,
      320,  362,  143,  416,  369,  411,  418,  143,  417,  419,
      421,  420,  422,  372,  321,  423,  365,  380,  314,  143,
      424,  143,  411,  363,  143,  426,  143,  316,  420,  428,
      427,  380,  382,  377,  429,  374,  313,  424,  378,  430,

      363,  431,  425,  325,  433,  330,  432,  388,  388,  434,
      390,  179,  310,  403,  386,  378,  430,  435,  436,  425,
      334,  438,  340,  437,  137,  398,  439,  446,  398,  137,
      405,  386,  447,  443,  435,  396,  409,  440,  401,  441,
      443,  353,  409,  444,  442,  448,  305,  303,  358,  445,
      449,  413,  396,  137,  440,  143,  419,  190,  137,  417,
      143,  453,  453,  450,  423,  454,  445,  413,  451,  415,
      368,  423,  456,  452,  411,  297,  458,  457,  455,  373,
      450,  459,  427,  143,  460,  432,  296,  381,  143,  461,
      432,  411,  430,  462,  437,  455,  389,  427,  463,  437,

      464,  435,  293,  404,  425,  465,  442,  442,  444,  430,
      288,  467,  137,  408,  440,  466,  468,  137,  435,  469,
      418,  425,  452,  452,  470,  286,  449,  454,  472,  450,
      422,  440,  466,  473,  471,  143,  474,  468,  476,  443,
      143,  475,  468,  477,  466,  453,  450,  473,  473,  459,
      281,  471,  273,  271,  471,  269,  262,  255,  250,  307,
      243,  466,  238,  290,  231,  228,  162,  278,  213,  212,
      209,  471,   42,   42,   42,   42,   49,  205,   49,   49,
       51,  204,   51,   51,   53,  201,   53,   91,  197,   91,
       91,  196,  193,  186,  185,  182,  170,  168,  220,  219,

      159,  153,  206,  148,  198,  142,  187,  136,  176,  133,
       71,   71,  116,  156,   97,   96,   93,   71,   71,  478,
       58,   88,   50,   50,   50,   50,   69,   86,   71,   70,
       69,   68,   59,   50,   52,   50,   48,  478,   41,    7,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478

    } ;

static yyconst flex_int16_t yy_chk[1193] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    6,    3,    4,   77,    9,    6,
        9,    3,    4,   21,   21,   22,   21,   81,   22,   30,
       37,   31,   29,   29,  483,   29,    6,   24,   24,   29,
       24,   32,   38,   39,   30,   81,   77,   24,   31,   24,
       24,   32,   55,   24,   24,   55,   36,   36,   29,   36,

       30,   37,   46,   31,   24,   47,   24,   47,   32,   24,
       39,  477,   73,   73,   38,   73,   46,   56,   56,   80,
       56,   58,   36,   61,   58,   74,   61,   56,   74,   76,
      476,   58,   46,   61,   63,   64,   63,   79,   96,   63,
       64,   96,   76,   82,   56,   84,   64,   64,   58,   64,
       61,   65,   83,   85,   80,   66,   65,   79,  100,   67,
       66,  100,   65,   65,   67,   65,   66,   66,  475,   66,
       67,   67,  122,   67,   75,   75,   82,   75,   87,   93,
       84,   83,   93,   88,   75,   88,   85,   87,   90,   93,
       90,   98,   88,   90,   97,   97,   98,   97,  474,  122,

      119,   75,   98,   98,   97,   98,   93,   99,   99,   88,
       99,  101,  470,  469,  104,  102,  101,  104,  119,  108,
      102,   97,  108,  101,  465,  101,  102,  102,  464,  102,
      103,  103,  101,  103,  105,  107,  107,  120,  107,  105,
      106,  109,  463,  109,  112,  106,  105,  112,  105,  101,
      109,  106,  106,  116,  106,  105,  124,  110,  111,  111,
      116,  111,  110,  462,  113,  125,  113,  109,  110,  110,
      120,  110,  105,  113,  118,  117,  118,  116,  117,  118,
      128,  121,  127,  128,  461,  117,  165,  127,  460,  124,
      113,  121,  125,  129,  130,  166,  129,  130,  131,  164,

      131,  458,  117,  131,  130,  133,  136,  162,  133,  164,
      162,  136,  137,  165,  138,  133,  168,  137,  168,  138,
      136,  130,  166,  137,  137,  138,  137,  136,  138,  139,
      457,  139,  133,  142,  139,  138,  172,  143,  142,  172,
      456,  145,  143,  145,  136,  144,  145,  142,  143,  143,
      144,  143,  138,  148,  142,  149,  144,  453,  149,  144,
      148,  153,  150,  448,  150,  149,  144,  150,  153,  154,
      447,  142,  154,  155,  159,  155,  446,  148,  155,  154,
      443,  159,  149,  144,  156,  153,  156,  157,  173,  157,
      439,  173,  157,  156,  163,  163,  154,  163,  159,  170,

      438,  171,  170,  171,  163,  174,  171,  175,  174,  170,
      156,  176,  175,  176,  177,  174,  177,  434,  433,  177,
      176,  163,  178,  178,  179,  178,  170,  179,  182,  180,
      214,  180,  174,  182,  429,  214,  185,  176,  180,  185,
      186,  187,  182,  187,  190,  186,  188,  190,  188,  182,
      187,  188,  186,  428,  186,  180,  189,  189,  193,  189,
      191,  186,  191,  193,  418,  196,  182,  187,  196,  191,
      197,  198,  193,  198,  201,  197,  416,  414,  186,  193,
      198,  201,  197,  199,  197,  199,  191,  204,  199,  404,
      204,  197,  205,  206,  205,  206,  193,  198,  201,  402,

      209,  205,  206,  213,  207,  213,  207,  209,  197,  207,
      212,  215,  213,  212,  215,  217,  400,  216,  205,  206,
      216,  218,  217,  218,  209,  219,  218,  222,  219,  213,
      222,  220,  225,  220,  399,  225,  224,  222,  395,  217,
      220,  224,  226,  228,  231,  226,  228,  231,  233,  394,
      232,  233,  226,  228,  222,  232,  229,  220,  229,  234,
      235,  229,  234,  239,  238,  235,  239,  244,  393,  226,
      228,  238,  244,  239,  235,  240,  245,  240,  243,  245,
      240,  235,  241,  243,  241,  392,  246,  241,  238,  246,
      239,  247,  243,  250,  251,  389,  247,  251,  235,  243,

      250,  252,  256,  252,  251,  247,  252,  256,  253,  255,
      253,  385,  247,  253,  255,  257,  243,  250,  257,  258,
      259,  251,  258,  255,  384,  262,  260,  259,  260,  247,
      255,  260,  262,  263,  264,  266,  265,  264,  263,  265,
      381,  267,  266,  267,  259,  269,  267,  255,  271,  262,
      271,  273,  269,  275,  376,  274,  275,  274,  273,  266,
      274,  276,  282,  277,  276,  278,  279,  282,  279,  269,
      277,  279,  278,  281,  283,  273,  281,  283,  284,  288,
      286,  284,  286,  296,  288,  373,  296,  277,  284,  278,
      289,  293,  289,  288,  290,  289,  290,  291,  293,  291,

      288,  371,  291,  290,  297,  284,  297,  298,  299,  313,
      298,  299,  313,  297,  300,  293,  301,  288,  305,  300,
      290,  301,  303,  305,  303,  320,  310,  320,  300,  306,
      297,  306,  305,  310,  306,  300,  307,  361,  307,  305,
      314,  308,  314,  308,  315,  307,  308,  315,  316,  314,
      310,  316,  300,  317,  318,  327,  305,  322,  317,  318,
      327,  358,  307,  323,  322,  323,  314,  317,  323,  324,
      325,  326,  324,  325,  317,  329,  331,  329,  326,  356,
      332,  322,  332,  331,  333,  332,  334,  333,  336,  334,
      335,  317,  346,  336,  337,  326,  339,  335,  338,  337,

      331,  338,  341,  339,  344,  342,  343,  342,  340,  341,
      342,  343,  345,  347,  335,  345,  347,  348,  349,  350,
      339,  349,  348,  351,  350,  330,  341,  352,  351,  353,
      352,  354,  353,  350,  355,  357,  355,  328,  354,  355,
      350,  360,  357,  360,  359,  363,  360,  362,  364,  359,
      363,  364,  362,  367,  321,  354,  367,  350,  359,  357,
      319,  362,  365,  366,  369,  359,  368,  365,  366,  368,
      370,  369,  370,  372,  379,  370,  365,  379,  312,  377,
      372,  374,  359,  365,  377,  375,  374,  375,  369,  378,
      375,  380,  382,  377,  378,  374,  311,  372,  380,  382,

      365,  383,  374,  383,  386,  387,  383,  388,  387,  386,
      390,  403,  309,  403,  388,  380,  382,  390,  391,  374,
      391,  396,  397,  391,  401,  397,  396,  410,  398,  401,
      405,  388,  410,  407,  390,  398,  407,  405,  401,  406,
      408,  406,  409,  408,  406,  411,  304,  302,  412,  409,
      411,  412,  398,  413,  405,  415,  419,  417,  413,  417,
      415,  421,  422,  419,  421,  422,  409,  413,  420,  415,
      420,  423,  424,  420,  413,  295,  425,  424,  423,  426,
      419,  425,  426,  427,  430,  432,  294,  431,  427,  430,
      431,  413,  432,  435,  437,  423,  436,  427,  435,  436,

      440,  437,  292,  441,  427,  440,  441,  442,  444,  432,
      287,  445,  449,  445,  442,  444,  445,  449,  437,  450,
      451,  427,  452,  451,  450,  285,  449,  454,  455,  452,
      455,  442,  444,  455,  454,  459,  466,  468,  471,  467,
      459,  466,  467,  471,  468,  472,  452,  473,  472,  459,
      280,  454,  272,  270,  473,  268,  261,  254,  249,  248,
      242,  468,  237,  236,  230,  227,  223,  221,  211,  210,
      208,  473,  479,  479,  479,  479,  480,  203,  480,  480,
      481,  202,  481,  481,  482,  200,  482,  484,  195,  484,
      484,  194,  192,  184,  183,  181,  169,  167,  161,  160,

      158,  152,  151,  147,  146,  141,  140,  135,  134,  132,
      126,  123,  115,  114,   95,   94,   92,   78,   72,   71,
       57,   54,   53,   49,   44,   43,   41,   40,   28,   27,
       26,   25,   23,   15,   14,   12,   11,    7,    2,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SONLexer.lex"

#line 8 "SONLexer.lex"

#include <string>
#include <sstream>
#include "SONLexer.h"

/* import the parser's token type into a local typedef */
typedef wasp::SONParser::token token;
typedef wasp::SONParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SONFlexLexer" */
/*%option yyclass="wasp::SONLexerImpl"*/
/* enable scanner to generate debug output. disable this for release
* versions. */
/*%option debug*/
/* no support for include files is planned */
/* enables the use of start condition stacks */


/* !!! The string allows hyphens (not trailing hyphens)!!! */
/* This string does not allow special characters '-','/'
*  and should only occur in the context of reference
*/
/*
* The 'execution unit' is a rebranded SCALE sequence construct
* where the sequence started with the unit_start rule below
* and terminated with unit_end rule below.
* We reproduce it here to account for the input construct
* while in transition...
*/
/* The following paragraph suffices to track locations accurately. Each time
* yylex is invoked, the begin position is moved onto the end position. */
#line 98 "SONLexer.lex"
#define YY_USER_ACTION  yylloc->columns(yyleng); file_offset+=yyleng;
#line 876 "SONLexer.cpp"

#define INITIAL 0
#define subtraction 1
#define execution_unit 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 101 "SONLexer.lex"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();

 /*** BEGIN EXAMPLE - Change the wasp lexer rules below ***/

#line 991 "SONLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 479 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1140 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 110 "SONLexer.lex"
{
    yy_push_state(execution_unit); // enter the 'unit' of execution
        capture_token(yylval,wasp::EXECUTION_UNIT_START);
    return token::EXECUTION_UNIT_START;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "SONLexer.lex"
{
    yy_pop_state(); // pop the execution state
    capture_token(yylval,wasp::EXECUTION_UNIT_END);
    return token::EXECUTION_UNIT_END;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "SONLexer.lex"
{ // capture the subtraction, return the literal '-'
    yy_pop_state();
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "SONLexer.lex"
{
    capture_token(yylval,wasp::FILL_EXPR);
    return token::FILLER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 129 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_COMMA);
    return token::COMMA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 133 "SONLexer.lex"
{
    capture_token(yylval,wasp::LTE);
    return token::LTE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "SONLexer.lex"
{
    capture_token(yylval,wasp::GTE);
    return token::GTE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 141 "SONLexer.lex"
{
    capture_token(yylval,wasp::LT);
    return token::LT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "SONLexer.lex"
{
    capture_token(yylval,wasp::GT);
    return token::GT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "SONLexer.lex"
{
    capture_token(yylval,wasp::EQ);
    return token::EQ;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 153 "SONLexer.lex"
{
    capture_token(yylval,wasp::BANG);
    return token::BANG;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 157 "SONLexer.lex"
{
    capture_token(yylval,wasp::ASSIGN);
    return token::ASSIGN;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 161 "SONLexer.lex"
{
    capture_token(yylval,wasp::NEQ);
    return token::NEQ;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 165 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_AND);
    return token::AND;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 169 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_OR);
    return token::OR;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 173 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACKET);
    return token::LBRACKET;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 177 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACKET);
    return token::RBRACKET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 181 "SONLexer.lex"
{
    capture_token(yylval,wasp::EXPONENT);
    return token::EXPONENT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 185 "SONLexer.lex"
{
    capture_token(yylval,wasp::MULTIPLY);
    return token::MULTIPLY;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 189 "SONLexer.lex"
{
  capture_token(yylval,wasp::DIVIDE);
  return token::DIVIDE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 193 "SONLexer.lex"
{
  capture_token(yylval,wasp::PLUS);
  return token::PLUS;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 197 "SONLexer.lex"
{
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 201 "SONLexer.lex"
{
  capture_token(yylval,wasp::LPAREN);
  return token::LPAREN;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 205 "SONLexer.lex"
{
 capture_token(yylval,wasp::RPAREN);
 return token::RPAREN;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 210 "SONLexer.lex"
{
    yy_push_state(subtraction); // if we have a minus sign immediately following, subtraction is occurring
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 215 "SONLexer.lex"
{
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 220 "SONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 227 "SONLexer.lex"
{
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
/* gobble up white-spaces */
case 29:
YY_RULE_SETUP
#line 232 "SONLexer.lex"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 237 "SONLexer.lex"
{
    yylloc->lines(yyleng); yylloc->step();
    m_token_data.push_line(file_offset-yyleng);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 242 "SONLexer.lex"
{
    capture_token(yylval,wasp::QUOTED_STRING);
    return token::QSTRING;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 246 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_TRUE);
    return token::TOKEN_TRUE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_FALSE);
    return token::TOKEN_FALSE;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 255 "SONLexer.lex"
{
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 259 "SONLexer.lex"
{
    capture_token(yylval,wasp::COMMENT);
    return token::COMMENT;
}
	YY_BREAK
/* pass all other characters up to bison
  * NOTE: references do not support whitespace */
case 36:
YY_RULE_SETUP
#line 266 "SONLexer.lex"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the wasp lexer rules above ***/
case 37:
YY_RULE_SETUP
#line 272 "SONLexer.lex"
ECHO;
	YY_BREAK
#line 1386 "SONLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(subtraction):
case YY_STATE_EOF(execution_unit):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SONfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SONfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SONrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SONrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 479 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 479 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 478);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SONalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SONalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SONfree((void *) b->yy_ch_buf  );

	SONfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SONalloc(new_size  );

		else
			(yy_start_stack) = (int *) SONrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SONalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SONrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SONfree (void * ptr )
{
	free( (char *) ptr );	/* see SONrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 272 "SONLexer.lex"



namespace wasp {

SONLexerImpl::SONLexerImpl(
                TokenPool<> & token_data,
                std::istream* in,
                std::ostream* out)
    : SONFlexLexer(in, out)
    , m_token_data(token_data)
    , file_offset(0)
{
}

SONLexerImpl::~SONLexerImpl()
{
}

void SONLexerImpl::set_debug(bool b)
{
    yy_flex_debug = b;
}
void SONLexerImpl::rewind()
{
    yyin->seekg(-yyleng,std::ios_base::cur);
    yyless(0);
}
void SONLexerImpl::capture_token(
        wasp::SONParser::semantic_type* yylval
        ,wasp::NODE type)
{
    size_t offset = file_offset - yyleng;
    yylval->node_index = m_token_data.size();
    m_token_data.push(yytext,type,offset);
}
}

/* This implementation of SONFlexLexer::yylex() is required to fill the
 * vtable of the class SONFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SONLexerImpl class instead. */

#ifdef yylex
#undef yylex
#endif

int SONFlexLexer::yylex()
{
    std::cerr << "in SONFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SONFlexLexer::yywrap()
{
    return 1;
}

