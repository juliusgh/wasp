#line 2 "SONLexer.cpp"
#line 2 "SONLexer.lex"
/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H




#line 11 "SONLexer.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SONFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *SONalloc (yy_size_t  );
void *SONrealloc (void *,yy_size_t  );
void SONfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "waspcore/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[482] =
    {   0,
        0,    0,    0,    0,    0,    0,   41,   39,   32,   33,
       12,   39,   38,   39,   39,   26,   27,   22,   24,    5,
       25,   39,   23,   29,    6,    9,   13,   10,   37,   37,
       37,   37,   37,   17,   18,   21,   37,   37,   37,   37,
       19,   39,   20,    1,   40,   40,   40,    3,   37,   32,
       14,    0,   34,   38,   15,    0,    0,    0,   29,    0,
       31,   38,   28,   31,   29,    0,    0,    0,    0,    0,
        7,   11,    8,    0,   37,    0,    0,    4,   37,   37,
       36,   37,   37,   37,   37,   37,   37,   37,   16,   37,
        0,   30,    0,   38,   30,   31,    0,    0,    0,   29,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    4,    4,
       37,   37,   37,   37,   37,   35,   37,   37,    2,    0,
        0,    0,   31,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    4,    0,    0,    0,    4,    4,    0,    0,    0,
        0,    4,    0,    0,    0,    4,   37,   37,   37,    0,
        0,    0,   31,    0,    0,    0,   31,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    4,
        0,    0,    4,    0,    4,   37,    0,    0,   31,    0,
       31,    0,    0,   31,    0,    0,    0,    0,    0,    0,
        4,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    4,
        4,   37,    0,   31,    0,    0,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    4,    0,    0,    0,    4,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    0,    4,    0,
        0,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    4,    0,    0,    0,    4,    0,   31,
        0,    0,    0,    0,    0,    0,    4,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    0,    0,    0,    0,
        0,    0,    4,    0,    4,    0,    0,    4,    0,    0,
        4,    0,    4,    0,    0,    4,    0,    4,    0,    0,

        4,    4,    0,    0,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    4,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    4,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    0,    0,    0,    4,    0,    4,    0,    0,    4,
        0,    0,    0,    4,    0,    4,    0,    4,    0,    0,
        4,    0,    4,    0,    0,    4,    0,    4,    0,    4,
        0
    } ;

static yyconst flex_int32_t yy_base[489] =
    {   0,
        0,  117,   94,   95,  381,   75,  441, 7992,    3, 7992,
      379,  404,    0,  399,  386, 7992, 7992, 7992, 7992, 7992,
      198,  211,  376,  224, 7992,  361,  360,  357,  371,  262,
      102,  212,  240, 7992, 7992, 7992,   83,   98,   18,   51,
     7992,  291, 7992,  353, 7992,  379,  367, 7992,  213,  273,
     7992,  361, 7992,    0, 7992,  333,  294,  312,  325,  335,
      348,    0, 7992,  379,  405,  441,  475,  501,  527,  553,
     7992, 7992, 7992,  289,  286,  238,  566,  374,  226,  244,
      277,  239,   14,  245,  243,  247,   19,  292, 7992,  253,
      578, 7992,  600,    0,  610,  632,  254,  642,  655,  668,

      695,  708,  722,  748,  774,  787,  802,  828,  854,  867,
      882,  894,  920,  933,  948,  960,  970,  982,  993, 1015,
     1047,  250,  294,  251,  200,  242,  295,  311,  108, 1069,
     1082, 1095, 1108, 1130, 1025, 1143, 1165, 1175, 1201, 1227,
     1255, 1277, 1287, 1297, 1323, 1349, 1377, 1399, 1409, 1419,
     1431, 1453, 1485, 1463, 1495, 1507, 1529, 1561, 1583, 1605,
     1539, 1616,  101, 1571, 1638, 1651,  285,  363,  366, 1673,
     1685, 1705, 1718, 1740, 1753, 1772, 1785, 1807, 1819, 1842,
     1855, 1873, 1885, 1895, 1921,  100, 1943, 1956, 1982, 2004,
     2036, 2058, 2071, 2083, 1992, 2109,   97, 2014, 2137, 2163,

     2185, 2217, 2119, 2227,   96, 2173, 2249, 2261, 2283, 2315,
     2195, 2325,   93, 2293, 2347, 2359, 2381, 2394, 2413, 2423,
     2445, 2458, 2477, 2487, 2500,   92, 2531, 2554, 2567, 2510,
     2589, 2621, 2541, 2643, 2658, 2671, 2684, 2710, 2599, 2720,
     2732, 2765, 2787, 2802, 2742, 2828, 2850, 2863, 2882, 2908,
     2918, 2930, 2941, 2963, 2995, 3017, 2973, 3043, 3065, 3078,
     3097, 3107, 3129, 3139, 3149, 3171, 3184, 3203, 3213, 3235,
     3245, 3255, 3277, 3289, 3309, 3319, 3341, 3354, 3373, 3383,
     3393, 3415, 3425, 3447, 3462, 3475, 3488, 3498, 3510, 3520,
     3546, 3568, 3580, 3603, 3613, 3623,   90, 3634, 3648, 3660,

     3682, 3695, 3721, 3743, 3753, 3775, 3763, 3801, 3823, 3835,
     3858, 3868, 3878,   47, 3889, 3903, 3915, 3937, 3950, 3976,
     3998, 4008, 4030, 4018, 4040, 4062, 4075, 4094, 4104, 4126,
     4136, 4158, 4146, 4168, 4190, 4203, 4222, 4232, 4254, 4269,
     4286, 4296, 4306, 4318, 4350, 4372, 4328, 4385, 4395, 4408,
     4423, 4436, 4462, 4484, 4497, 4516, 4526, 4548, 4558, 4568,
     4590, 4622, 4644, 4654, 4680, 4695, 4708, 4734, 4756, 4769,
     4788, 4798, 4820, 4830, 4840, 4862, 4894, 4916, 4926, 4952,
     4967, 4980, 4990, 5000, 5012, 5044, 5022, 5054, 5069, 5082,
     5092, 5102, 5114, 5146, 5124, 5156, 5168, 5178, 5193, 5206,

     5216, 5226, 5238, 5270, 5280, 5292, 5302, 5312, 5334, 5347,
     5366, 5376, 5398, 5413, 5430, 5456, 5466, 5492, 5510, 5522,
     5532, 5542, 5564, 5577, 5596, 5606, 5628, 5643, 5660, 5686,
     5696, 5708, 5723, 5740, 5750, 5760, 5772, 5787, 5804, 5814,
     5824, 5836, 5851, 5868, 5878, 5888, 5900, 5932, 5910, 5942,
     5954, 5980, 5995, 6008, 6018, 6028, 6040, 6072, 6050, 6082,
     6094, 6120, 6130, 6140, 6150, 6160, 6170, 6180, 6195, 6208,
     6218, 6228, 6240, 6255, 6272, 6282, 6292, 6304, 6314, 6324,
     7992, 6383, 6638, 6893, 7148, 7403, 7614, 7736
    } ;

static yyconst flex_int32_t yy_def[489] =
    {   0,
      482,  482,  483,  483,    2,    2,  481,  481,  481,  481,
      481,  484,  485,  481,  486,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  487,  487,
      487,  487,  487,  481,  481,  481,   30,  487,  487,  487,
      481,  481,  481,  481,  481,  484,  486,  481,  487,  481,
      481,  484,  481,  485,  481,  486,  481,  481,  481,  481,
      481,  488,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  487,  487,   30,  481,   30,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  481,  487,
      481,  481,  481,  488,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  487,  487,  487,  487,  487,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  487,  487,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  487,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  487,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
        0,  481,  481,  481,  481,  481,  481,  481
    } ;

static yyconst flex_int32_t yy_nxt[8249] =
    {   0,
      481,  481,  481,  481,  481,  481,  481,  481,    9,   10,
      481,   50,    9,  481,  481,   50,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,    9,   11,   12,   50,  481,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   25,   74,   26,
       27,   28,   74,   74,   29,   29,   29,   29,   29,   30,
       29,   29,   29,   29,   29,   29,   29,   31,   29,   29,
       29,   29,   29,   32,   29,   29,   29,   29,   33,   29,
       34,  316,   35,   36,   29,   74,   29,   29,   29,   29,

       29,   37,   29,   29,   29,   29,   29,   29,   29,   38,
       29,   29,   29,   29,   29,   39,   29,   29,   29,   29,
       40,   29,   41,   42,   43,    9,   10,   46,   46,    9,
      125,   87,   47,   47,  299,  128,  165,  215,   48,   48,
      207,  199,   74,   49,  188,  222,   74,   75,    9,   11,
       12,   88,   74,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   25,   49,   26,   44,   28,   86,
       81,   29,   29,   29,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   29,   29,   29,

       32,   29,   29,   29,   29,   33,   29,   34,   81,   35,
       36,   29,   81,   29,   29,   29,   29,   29,   37,   29,
       29,   29,   29,   29,   29,   29,   38,   29,   29,   29,
       29,   29,   39,   29,   29,   29,   29,   40,   29,   41,
       42,   43,   57,   58,   74,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   60,   74,   74,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   63,   64,
       74,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   50,  117,   74,   74,   50,   74,   74,   74,   74,
       90,   74,   66,   82,   74,   74,   67,   74,   99,   68,

      126,  122,   75,   69,   50,   70,   76,   77,   84,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  126,
      129,   74,   90,  124,   66,   83,   79,  126,   67,   74,
       74,   68,  167,  481,   75,   69,   74,   70,   74,   74,
       85,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,  123,  129,   81,  127,   74,   60,  126,   80,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   63,
       64,   53,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   92,   66,   53,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   53,  126,   74,  168,  169,
       74,  126,   53,   72,   89,   74,   93,   73,   74,  120,
       72,   71,   62,   95,   53,   66,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   55,   53,   75,   51,
      481,   27,  121,  481,  481,  481,  481,   97,   93,   63,
       64,  481,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,  481,   81,  481,  481,   81,  481,  481,  481,
       75,  481,  481,   66,  121,  481,  481,   67,  481,   97,
       68,  481,  481,   98,   69,   99,   70,  481,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  481,  481,

      481,  481,  481,  481,  481,   66,  101,  481,  481,   67,
      481,  481,   68,  101,  481,  481,   69,  481,   70,  102,
      103,  481,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  105,  481,  481,  481,  481,  481,  481,  105,
      481,  481,  481,  481,  481,  106,  107,  481,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  109,  481,
      481,  481,  481,  481,  481,  109,  481,  481,  481,  481,
      481,  110,  111,  481,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  113,  481,  481,  481,  481,  481,
      481,  113,  481,  481,  481,  481,  481,  114,  115,  481,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      118,  481,  481,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,   58,  481,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,  481,  481,  481,  481,  481,
      481,  481,  131,  481,  132,  481,  130,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  481,  481,  481,
      481,  481,  481,  481,  481,  481,   92,  481,  130,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  135,

      134,  481,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   63,   64,  481,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  481,  101,  481,  481,  481,
      481,  481,  134,  101,  481,  481,   97,  481,  481,  102,
      103,  481,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  137,  103,  481,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  481,  138,  481,   97,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  140,
      481,  481,  481,  481,  481,  481,  140,  481,  481,  481,
      481,  481,  481,  141,  481,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  105,  481,  481,  481,  481,
      481,  481,  105,  481,  481,  481,  142,  481,  106,  107,
      481,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  143,  107,  481,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  481,  481,  144,  481,  142,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  146,
      481,  481,  481,  481,  481,  481,  146,  481,  481,  481,
      481,  481,  481,  147,  481,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  481,  481,  481,  481,
      481,  481,  109,  481,  481,  481,  148,  481,  110,  111,

      481,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  149,  111,  481,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  481,  481,  150,  481,  148,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  152,
      481,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  113,  481,  481,  481,  481,  481,  481,  113,  481,
      481,  481,  153,  481,  114,  115,  481,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  154,  115,  481,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      481,  481,  155,  481,  153,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  157,  481,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  481,  158,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  481,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  161,
      158,  160,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  481,  163,  481,  481,  481,  481,  481,  164,
      481,  165,  481,  160,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  481,  481,  481,  481,  481,  481,
      481,  170,  481,  481,  481,  163,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  172,  481,  481,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  172,
      481,  481,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   92,  481,  481,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  481,  481,  481,  481,  481,
      481,  481,  175,  481,  176,  481,  174,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,   92,  481,  481,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      481,  481,  481,  481,  481,  481,  481,  481,  174,  481,
      481,  178,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  140,  481,  481,  481,  481,  481,  481,  140,
      481,  481,  481,  178,  481,  481,  481,  481,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  140,  481,
      481,  481,  481,  481,  481,  140,  481,  481,  481,  180,
      481,  181,  182,  481,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  481,  481,  140,  481,  481,  481,
      481,  481,  481,  140,  481,  481,  481,  481,  481,  184,

      481,  180,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  481,  481,  481,  481,  481,  481,  481,  187,
      481,  188,  481,  186,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  146,  186,  481,  481,  481,  481,
      481,  146,  481,  481,  481,  481,  481,  481,  481,  481,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      146,  481,  481,  481,  481,  481,  481,  146,  481,  481,
      481,  191,  481,  192,  193,  481,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  481,  481,  146,  481,
      481,  481,  481,  481,  481,  146,  481,  481,  481,  481,
      481,  195,  481,  191,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  481,  481,  481,  481,  481,  481,
      481,  198,  481,  199,  481,  197,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  481,  197,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  203,  481,  202,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      481,  205,  481,  481,  481,  481,  481,  206,  481,  207,
      481,  202,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  481,  205,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  211,  481,  210,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  481,  213,  481,  481,

      481,  481,  481,  214,  481,  215,  481,  210,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,   77,  213,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      481,  481,  481,  481,  481,  481,  481,  218,  481,  219,
      481,  217,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  481,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  224,  217,  221,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,   74,  120,  481,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  481,  481,
      481,  481,  481,  481,  481,  481,  221,  481,  481,  226,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
       58,  481,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  226,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   92,  481,  481,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  481,  481,  481,  481,  481,
      481,  481,  228,  481,  132,  481,  227,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  230,  481,  481,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      481,  481,  481,  481,  481,  481,  230,  481,  227,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,   92,
      481,  481,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  481,  481,  481,  481,  481,  481,  481,  233,
      481,  481,  481,  232,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  103,  481,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  481,  481,  481,  481,
      481,  481,  481,  481,  236,  232,  237,  235,  481,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  239,

      182,  481,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  481,  481,  481,  481,  481,  240,  481,  235,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      242,  481,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  140,  243,  481,  481,  481,  481,  481,  140,
      481,  481,  481,  481,  481,  481,  481,  481,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  481,  481,
      481,  481,  481,  481,  481,  243,  481,  481,  481,  244,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      245,  481,  481,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  140,  481,  481,  481,  481,  481,  481,
      140,  244,  481,  481,  481,  481,  481,  141,  481,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  107,
      186,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  481,  247,  481,  481,  481,  481,  481,  248,  481,
      249,  481,  186,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  251,  193,  247,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  252,  481,  481,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  254,  481,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      146,  481,  481,  481,  481,  481,  481,  146,  481,  481,
      481,  255,  481,  481,  481,  481,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  481,  256,  481,  481,
      481,  257,  481,  255,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  146,  481,  481,  481,  481,  481,

      481,  146,  481,  481,  481,  481,  481,  481,  147,  256,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      111,  197,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  481,  259,  481,  481,  481,  481,  481,  260,
      481,  261,  481,  197,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  481,  259,  481,  481,  481,  481,
      481,  481,  481,  264,  481,  263,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  152,  481,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  263,  115,  205,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      481,  266,  481,  481,  481,  481,  481,  267,  481,  268,
      481,  205,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  481,  266,  481,  481,  481,  481,  481,  481,
      481,  271,  481,  270,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  157,  481,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  481,  481,  481,  481,
      481,  481,  481,  273,  481,  270,  481,  213,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  275,  481,
      481,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  481,  481,  481,  481,  481,  481,  275,  481,  213,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      481,  481,  481,  481,  481,  481,  481,  278,  481,  279,
      481,  277,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  224,  481,  481,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  481,  481,  481,  481,  481,
      481,  481,  120,  277,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,   74,  163,  481,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  481,  282,  481,
      481,  481,  481,  283,  481,  481,  481,  163,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  172,  481,

      282,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,   92,  481,  481,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  481,  481,  481,  481,  481,  481,
      481,  481,  481,   92,  481,  227,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  481,  285,  481,  481,
      481,  481,  481,  286,  481,  176,  481,  227,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  481,  481,
      481,  481,  481,  481,  481,  481,  481,   92,  481,  285,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      288,  481,  481,  481,  481,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  481,  481,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  290,  481,
      481,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  140,  481,  481,  481,  481,  481,  481,  140,  481,
      481,  481,  481,  481,  481,  481,  481,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  481,  292,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  481,

      294,  481,  481,  481,  481,  481,  481,  481,  481,  295,
      292,  481,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  481,  481,  481,  481,  481,  481,  481,  298,
      481,  299,  294,  297,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  301,  481,  302,  481,  481,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  140,
      481,  481,  481,  481,  481,  297,  140,  481,  481,  481,
      481,  481,  481,  481,  481,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  481,  481,  481,  481,  481,
      481,  481,  305,  481,  481,  481,  304,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  307,  481,  481,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      481,  481,  481,  481,  481,  481,  307,  481,  304,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  146,
      481,  481,  481,  481,  481,  481,  146,  481,  481,  481,
      481,  481,  481,  481,  481,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  481,  309,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  481,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  312,  309,  311,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      481,  314,  481,  481,  481,  481,  481,  315,  481,  316,
      481,  311,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  481,  481,  481,  481,  481,  481,  481,  318,
      481,  319,  481,  314,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  146,  481,  481,  481,  481,  481,
      481,  146,  481,  481,  481,  481,  481,  481,  481,  481,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      481,  481,  481,  481,  481,  481,  481,  322,  481,  481,
      481,  321,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  481,  481,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  481,  481,  481,  481,  481,
      481,  324,  481,  321,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  481,  481,  481,  481,  481,  481,
      481,  327,  481,  328,  481,  326,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  481,  326,  481,  481,
      481,  481,  481,  331,  481,  481,  481,  330,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  481,
      481,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  481,  481,  481,  481,  481,  481,  333,  481,  330,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      481,  481,  481,  481,  481,  481,  481,  336,  481,  337,
      481,  335,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  481,  335,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  339,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   77,  481,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  339,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  481,  481,  481,  481,
      481,  481,  481,  341,  481,  219,  481,  340,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,  481,

      481,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  481,  481,  481,  481,  481,  481,  343,  481,  340,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      481,  345,  481,  481,  481,  481,  481,  347,  481,   74,
      481,  346,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  481,  345,  481,  481,  481,  481,  481,  481,
      481,   92,  481,  346,  284,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  349,  481,  481,  481,  481,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  230,
      481,  481,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,   92,  481,  481,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  103,  285,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  140,  481,  481,
      481,  481,  481,  481,  140,  481,  481,  481,  285,  481,
      481,  481,  481,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  481,  481,  481,  481,  481,  481,  481,
      352,  481,  237,  481,  351,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  182,  481,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  481,  481,  481,
      481,  481,  481,  481,  481,  355,  351,  356,  354,  481,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      354,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  358,  359,  481,  481,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  242,  481,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  481,  481,  481,
      481,  481,  481,  358,  481,  481,  361,  481,  297,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  361,
      481,  481,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  140,  481,  481,  481,  481,  481,  481,  140,
      297,  481,  481,  481,  481,  481,  481,  481,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  481,  481,
      481,  481,  481,  481,  481,  364,  481,  481,  481,  363,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      107,  363,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  146,  481,  481,  481,  481,  481,  481,  146,
      481,  481,  481,  481,  481,  481,  481,  481,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  481,  481,
      481,  481,  481,  481,  481,  367,  481,  249,  481,  366,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      193,  481,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  481,  481,  481,  481,  481,  481,  481,  481,

      370,  366,  371,  369,  481,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  369,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  373,  374,  481,  481,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      254,  481,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  481,  481,  481,  481,  481,  481,  373,  481,
      481,  376,  481,  314,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  376,  481,  481,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  146,  481,  481,
      481,  481,  481,  481,  146,  314,  481,  481,  481,  481,
      481,  481,  481,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  481,  481,  481,  481,  481,  481,  481,
      379,  481,  481,  481,  378,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  111,  378,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  481,  481,  481,

      481,  481,  481,  481,  382,  481,  261,  481,  381,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      481,  481,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  481,  481,  481,  481,  481,  481,  384,  481,
      381,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  481,  481,  481,  481,  481,  481,  481,  387,  481,
      481,  481,  386,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  334,  334,  334,  334,  334,  334,  334,

      334,  334,  334,  115,  386,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  481,  481,  481,  481,  481,
      481,  481,  390,  481,  268,  481,  389,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  392,  481,  481,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      481,  481,  481,  481,  481,  481,  392,  481,  389,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  481,
      481,  481,  481,  481,  481,  481,  395,  481,  481,  481,

      394,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  397,  481,  481,  481,  481,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  481,  481,  481,  481,
      275,  481,  394,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  481,  340,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  481,  399,  481,  481,  481,
      481,  481,  400,  481,  279,  481,  340,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  481,  481,  481,
      481,  481,  481,  481,  347,  481,  481,  481,  399,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,   74,
      481,  481,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,   92,  481,  481,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  403,  481,  481,  481,  481,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      290,  481,  481,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  140,  481,  481,  481,  481,  481,  481,

      140,  481,  481,  481,  481,  481,  481,  481,  481,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  481,
      481,  481,  481,  481,  481,  481,  405,  481,  481,  481,
      351,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  407,  481,  481,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  481,  481,  481,  481,  481,  481,
      407,  481,  351,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  481,  481,  481,  481,  481,  481,  481,
      410,  481,  411,  481,  409,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  481,  409,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  413,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  481,  481,  481,
      481,  481,  481,  140,  481,  481,  481,  481,  481,  481,
      140,  481,  481,  481,  481,  481,  481,  481,  413,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  481,
      481,  481,  481,  481,  481,  481,  415,  481,  302,  481,
      414,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  140,  481,  481,  481,  481,  481,  481,  140,  481,
      481,  481,  414,  481,  481,  481,  481,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  417,  481,  481,
      481,  481,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  307,  481,  481,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  146,  481,  481,  481,  481,
      481,  481,  146,  481,  481,  481,  481,  481,  481,  481,
      481,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  481,  481,  481,  481,  481,  481,  481,  419,  481,

      481,  481,  366,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  481,  481,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  481,  481,  481,  481,
      481,  481,  421,  481,  366,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  481,  481,  481,  481,  481,
      481,  481,  424,  481,  425,  481,  423,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  481,  423,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  427,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  481,
      481,  481,  481,  481,  481,  146,  481,  481,  481,  481,
      481,  481,  146,  481,  481,  481,  481,  481,  481,  481,
      427,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  481,  481,  481,  481,  481,  481,  481,  429,  481,
      319,  481,  428,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  146,  481,  481,  481,  481,  481,  481,
      146,  481,  481,  481,  428,  481,  481,  481,  481,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  431,
      481,  481,  481,  481,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  324,  481,  481,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  481,  381,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  481,
      433,  481,  481,  481,  481,  481,  434,  481,  328,  481,
      381,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  436,  433,  481,  481,  481,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  333,  481,  481,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  481,
      389,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  481,  438,  481,  481,  481,  481,  481,  439,  481,
      337,  481,  389,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  481,  438,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  441,  481,  481,  481,  481,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      343,  481,  481,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  481,  399,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  481,  481,  481,  481,  481,

      481,  140,  481,  481,  481,  481,  481,  481,  140,  481,
      481,  481,  481,  481,  481,  481,  399,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  182,  481,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  481,
      481,  481,  481,  481,  481,  481,  444,  481,  356,  481,
      443,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  446,  481,  481,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  481,  481,  481,  481,  481,  481,
      446,  481,  443,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  481,  481,  481,  481,  481,  481,  481,
      449,  481,  481,  481,  448,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  451,  481,  481,  481,  481,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      481,  481,  481,  481,  361,  481,  448,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  140,  481,  481,
      481,  481,  481,  481,  140,  481,  481,  481,  481,  481,

      481,  481,  481,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  146,  414,  481,  481,  481,  481,  481,
      146,  481,  481,  481,  481,  481,  481,  481,  481,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  481,
      481,  481,  481,  481,  481,  481,  414,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  193,  481,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  481,

      481,  481,  481,  481,  481,  481,  454,  481,  371,  481,
      453,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  481,  481,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  481,  481,  481,  481,  481,  481,
      456,  481,  453,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  481,  481,  481,  481,  481,  481,  481,
      459,  481,  481,  481,  458,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  461,  481,  481,  481,  481,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      481,  481,  481,  481,  376,  481,  458,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  146,  481,  481,
      481,  481,  481,  481,  146,  481,  481,  481,  481,  481,
      481,  481,  481,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  481,  428,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  463,  481,  481,  481,  481,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      481,  481,  481,  481,  384,  481,  428,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  481,  433,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  465,
      481,  481,  481,  481,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  481,  481,  481,  481,  392,  481,
      433,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  481,  438,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  467,  481,  481,  481,  481,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  468,  481,  481,
      481,  481,  407,  481,  438,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  481,  443,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  481,  469,  481,
      481,  481,  481,  481,  470,  481,  411,  481,  443,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  481,

      469,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  140,  481,  481,  481,  481,  481,  481,  140,  481,
      481,  481,  481,  481,  481,  481,  481,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  472,  481,  481,
      481,  481,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  421,  481,  481,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  481,  453,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  460,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  481,  474,  481,
      481,  481,  481,  481,  475,  481,  425,  481,  453,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  481,
      474,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  146,  481,  481,  481,  481,  481,  481,  146,  481,
      481,  481,  481,  481,  481,  481,  481,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  477,  481,  481,
      481,  481,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  446,  481,  481,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  481,  469,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  479,  481,  481,

      481,  481,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  481,  481,  481,  481,  456,  481,  469,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  481,
      474,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  481,  474,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   52,   52,   52,   52,   52,   52,   52,

       52,   52,  481,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   54,   54,
       54,   54,   54,   54,   54,   54,   54,  481,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   56,   56,   56,   56,   56,   56,   56,
       56,   56,  481,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,  481,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   75,  481,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  481,  481,  481,  481,  481,  481,  481,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,  481,  481,  481,  481,   75,  481,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  481,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,    7,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481
    } ;

static yyconst flex_int32_t yy_chk[8249] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
        0,    9,    1,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    1,    9,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   83,    1,
        1,    1,   39,   87,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,  314,    1,    1,    1,   40,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    3,    4,    2,
       83,   39,    3,    4,  297,   87,  226,  213,    3,    4,
      205,  197,   38,    6,  186,  163,   31,   37,    2,    2,
        2,   40,  129,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    6,    2,    2,    2,   37,
       31,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   38,    2,
        2,    2,   31,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   21,   21,  125,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   22,   32,   49,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   24,   24,
       79,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   50,   76,   82,   33,   50,  126,   85,   80,   84,
       49,   86,   24,   32,  122,  124,   24,   90,   97,   24,

      125,   79,   76,   24,   50,   24,   30,   30,   33,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  124,
       90,   81,   49,   82,   24,   32,   30,   84,   24,  167,
       75,   24,  122,   74,   76,   24,   88,   24,  123,  127,
       33,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   80,   90,  167,   86,  128,   58,   85,   30,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   56,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   59,   52,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   47,   88,  168,  123,  127,
      169,  128,   46,   44,   42,   29,   61,   28,   78,   78,
       27,   26,   23,   64,   15,   59,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   14,   12,   78,   11,
        7,    5,   78,    0,    0,    0,    0,   64,   61,   65,
       65,    0,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,    0,  168,    0,    0,  169,    0,    0,    0,
       78,    0,    0,   65,   78,    0,    0,   65,    0,   64,
       65,    0,    0,   66,   65,   66,   65,    0,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,    0,    0,

        0,    0,    0,    0,    0,   65,   67,    0,    0,   65,
        0,    0,   65,   67,    0,    0,   65,    0,   65,   67,
       67,    0,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   68,    0,    0,    0,    0,    0,    0,   68,
        0,    0,    0,    0,    0,   68,   68,    0,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   69,    0,
        0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
        0,   69,   69,    0,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   70,    0,    0,    0,    0,    0,
        0,   70,    0,    0,    0,    0,    0,   70,   70,    0,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       77,    0,    0,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   91,    0,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,    0,    0,    0,    0,    0,
        0,    0,   93,    0,   93,    0,   91,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,    0,   91,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   99,

       96,    0,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  100,  100,    0,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,    0,  101,    0,    0,    0,
        0,    0,   96,  101,    0,    0,  100,    0,    0,  101,
      101,    0,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  102,  102,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,    0,  103,    0,  100,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  104,
        0,    0,    0,    0,    0,    0,  104,    0,    0,    0,
        0,    0,    0,  104,    0,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  105,    0,    0,    0,    0,
        0,    0,  105,    0,    0,    0,  104,    0,  105,  105,
        0,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  106,  106,    0,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,    0,    0,  107,    0,  104,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  108,
        0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
        0,    0,    0,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,    0,    0,    0,    0,
        0,    0,  109,    0,    0,    0,  108,    0,  109,  109,

        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  110,  110,    0,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,    0,    0,  111,    0,  108,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  112,
        0,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  113,    0,    0,    0,    0,    0,    0,  113,    0,
        0,    0,  112,    0,  113,  113,    0,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  114,  114,    0,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
        0,    0,  115,    0,  112,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  116,    0,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,    0,  116,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
      116,  119,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,    0,  120,    0,    0,    0,    0,    0,  121,
        0,  121,    0,  119,  121,  121,  121,  121,  121,  121,

      121,  121,  121,  121,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,  120,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,    0,    0,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  132,
        0,    0,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  133,    0,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,    0,    0,    0,    0,    0,
        0,    0,  134,    0,  134,    0,  133,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  136,    0,    0,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

        0,    0,    0,    0,    0,    0,    0,    0,  133,    0,
        0,  136,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  139,    0,    0,    0,    0,    0,    0,  139,
        0,    0,    0,  136,    0,    0,    0,    0,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  140,    0,
        0,    0,    0,    0,    0,  140,    0,    0,    0,  139,
        0,  140,  140,    0,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,    0,    0,  141,    0,    0,    0,
        0,    0,    0,  141,    0,    0,    0,    0,    0,  141,

        0,  139,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,    0,    0,    0,    0,    0,    0,    0,  142,
        0,  142,    0,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  145,  141,    0,    0,    0,    0,
        0,  145,    0,    0,    0,    0,    0,    0,    0,    0,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      146,    0,    0,    0,    0,    0,    0,  146,    0,    0,
        0,  145,    0,  146,  146,    0,  146,  146,  146,  146,

      146,  146,  146,  146,  146,  146,    0,    0,  147,    0,
        0,    0,    0,    0,    0,  147,    0,    0,    0,    0,
        0,  147,    0,  145,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,    0,    0,    0,    0,    0,    0,
        0,  148,    0,  148,    0,  147,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,    0,  147,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  152,    0,  151,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
        0,  152,    0,    0,    0,    0,    0,  153,    0,  153,
        0,  151,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,    0,  152,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  157,    0,  156,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,    0,  157,    0,    0,

        0,    0,    0,  158,    0,  158,    0,  156,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  159,  157,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
        0,    0,    0,    0,    0,    0,    0,  160,    0,  160,
        0,  159,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,    0,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  165,  159,  162,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  166,  166,    0,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,  166,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      171,    0,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  166,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  173,    0,    0,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,    0,    0,    0,    0,    0,
        0,    0,  174,    0,  174,    0,  173,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  175,    0,    0,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
        0,    0,    0,    0,    0,    0,  176,    0,  173,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,
        0,    0,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,    0,    0,    0,    0,    0,    0,    0,  178,
        0,    0,    0,  177,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  179,    0,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,    0,    0,    0,    0,
        0,    0,    0,    0,  180,  177,  180,  179,    0,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  181,

      181,    0,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,    0,    0,    0,    0,    0,  182,    0,  179,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      183,    0,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  185,  183,    0,    0,    0,    0,    0,  185,
        0,    0,    0,    0,    0,    0,    0,    0,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,    0,    0,
        0,    0,    0,    0,    0,  183,    0,    0,    0,  185,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      188,    0,    0,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  189,    0,    0,    0,    0,    0,    0,
      189,  185,    0,    0,    0,    0,    0,  189,    0,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  190,
      189,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,    0,  190,    0,    0,    0,    0,    0,  191,    0,
      191,    0,  189,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  192,  192,  190,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,    0,    0,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  194,    0,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      196,    0,    0,    0,    0,    0,    0,  196,    0,    0,
        0,  194,    0,    0,    0,    0,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,    0,  196,    0,    0,
        0,  199,    0,  194,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  200,    0,    0,    0,    0,    0,

        0,  200,    0,    0,    0,    0,    0,    0,  200,  196,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      201,  200,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,    0,  201,    0,    0,    0,    0,    0,  202,
        0,  202,    0,  200,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,    0,  201,    0,    0,    0,    0,
        0,    0,    0,  207,    0,  204,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  208,    0,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  204,  209,  208,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
        0,  209,    0,    0,    0,    0,    0,  210,    0,  210,
        0,  208,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,    0,  209,    0,    0,    0,    0,    0,    0,
        0,  215,    0,  212,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  216,    0,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,    0,    0,    0,    0,
        0,    0,    0,  217,    0,  212,    0,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  218,    0,
        0,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,    0,    0,    0,    0,    0,    0,  219,    0,  216,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
        0,    0,    0,    0,    0,    0,    0,  221,    0,  221,
        0,  220,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  222,    0,    0,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,    0,    0,    0,    0,    0,
        0,    0,  223,  220,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  225,  223,    0,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,    0,  225,    0,
        0,    0,    0,  227,    0,    0,    0,  223,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  228,    0,

      225,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  229,    0,    0,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  231,    0,  229,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,    0,  231,    0,    0,
        0,    0,    0,  232,    0,  232,    0,  229,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,    0,  231,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      235,    0,    0,    0,    0,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  236,    0,    0,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  237,    0,
        0,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  238,    0,    0,    0,    0,    0,    0,  238,    0,
        0,    0,    0,    0,    0,    0,    0,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,    0,  238,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,    0,

      241,    0,    0,    0,    0,    0,    0,    0,    0,  242,
      238,    0,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,    0,    0,    0,    0,    0,    0,    0,  243,
        0,  243,  241,  242,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  244,    0,  244,    0,    0,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  246,
        0,    0,    0,    0,    0,  242,  246,    0,    0,    0,
        0,    0,    0,    0,    0,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,    0,    0,    0,    0,    0,
        0,    0,  247,    0,    0,    0,  246,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  248,    0,    0,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
        0,    0,    0,    0,    0,    0,  249,    0,  246,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  250,
        0,    0,    0,    0,    0,    0,  250,    0,    0,    0,
        0,    0,    0,    0,    0,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,    0,  250,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,    0,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  254,  250,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        0,  254,    0,    0,    0,    0,    0,  255,    0,  255,
        0,  253,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,    0,    0,    0,    0,    0,    0,    0,  256,
        0,  256,    0,  254,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  258,    0,    0,    0,    0,    0,
        0,  258,    0,    0,    0,    0,    0,    0,    0,    0,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

        0,    0,    0,    0,    0,    0,    0,  259,    0,    0,
        0,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  260,    0,    0,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,    0,    0,    0,    0,    0,
        0,  261,    0,  258,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,    0,    0,    0,    0,    0,    0,
        0,  263,    0,  263,    0,  262,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,    0,  262,    0,    0,
        0,    0,    0,  266,    0,    0,    0,  265,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  267,    0,
        0,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,    0,    0,    0,    0,    0,    0,  268,    0,  265,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
        0,    0,    0,    0,    0,    0,    0,  270,    0,  270,
        0,  269,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,    0,  269,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  272,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  274,    0,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  272,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,    0,    0,    0,    0,
        0,    0,    0,  277,    0,  277,    0,  276,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  278,    0,

        0,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,    0,    0,    0,    0,    0,    0,  279,    0,  276,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
        0,  280,    0,    0,    0,    0,    0,  282,    0,  282,
        0,  281,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,    0,  280,    0,    0,    0,    0,    0,    0,
        0,  284,    0,  281,  284,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  285,    0,    0,    0,    0,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  286,
        0,    0,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  287,    0,    0,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  289,  287,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  291,    0,    0,
        0,    0,    0,    0,  291,    0,    0,    0,  287,    0,
        0,    0,    0,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,    0,    0,    0,    0,    0,    0,    0,
      292,    0,  292,    0,  291,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  293,    0,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,    0,    0,    0,
        0,    0,    0,    0,    0,  294,  291,  294,  293,    0,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      293,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  296,  299,    0,    0,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  300,    0,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,    0,    0,    0,
        0,    0,    0,  296,    0,    0,  301,    0,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  302,
        0,    0,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  303,    0,    0,    0,    0,    0,    0,  303,
      300,    0,    0,    0,    0,    0,    0,    0,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,    0,    0,
        0,    0,    0,    0,    0,  304,    0,    0,    0,  303,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      306,  303,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  308,    0,    0,    0,    0,    0,    0,  308,
        0,    0,    0,    0,    0,    0,    0,    0,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,    0,    0,
        0,    0,    0,    0,    0,  309,    0,  309,    0,  308,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      310,    0,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,    0,    0,    0,    0,    0,    0,    0,    0,

      311,  308,  311,  310,    0,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  310,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  313,  316,    0,    0,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      317,    0,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,    0,    0,    0,    0,    0,    0,  313,    0,
        0,  318,    0,  317,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  319,    0,    0,  319,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  320,    0,    0,
        0,    0,    0,    0,  320,  317,    0,    0,    0,    0,
        0,    0,    0,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,    0,    0,    0,    0,    0,    0,    0,
      321,    0,    0,    0,  320,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  323,  320,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,    0,    0,    0,

        0,    0,    0,    0,  326,    0,  326,    0,  325,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  327,
        0,    0,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,    0,    0,    0,    0,    0,    0,  328,    0,
      325,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,    0,    0,    0,    0,    0,    0,    0,  330,    0,
        0,    0,  329,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  332,  329,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,    0,    0,    0,    0,    0,
        0,    0,  335,    0,  335,    0,  334,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  336,    0,    0,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
        0,    0,    0,    0,    0,    0,  337,    0,  334,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,    0,
        0,    0,    0,    0,    0,    0,  339,    0,    0,    0,

      338,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  340,    0,    0,    0,    0,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,    0,    0,    0,    0,
      341,    0,  338,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,    0,  342,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,    0,  344,    0,    0,    0,
        0,    0,  345,    0,  345,    0,  342,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,    0,    0,    0,
        0,    0,    0,    0,  346,    0,    0,    0,  344,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  348,
        0,    0,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  350,    0,    0,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  351,    0,    0,    0,    0,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      352,    0,    0,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  353,    0,    0,    0,    0,    0,    0,

      353,    0,    0,    0,    0,    0,    0,    0,    0,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,    0,
        0,    0,    0,    0,    0,    0,  354,    0,    0,    0,
      353,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  355,    0,    0,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,    0,    0,    0,    0,    0,    0,
      356,    0,  353,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,    0,    0,    0,    0,    0,    0,    0,
      358,    0,  358,    0,  357,  358,  358,  358,  358,  358,

      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,    0,  357,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  360,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,    0,    0,    0,
        0,    0,    0,  362,    0,    0,    0,    0,    0,    0,
      362,    0,    0,    0,    0,    0,    0,    0,  360,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,    0,
        0,    0,    0,    0,    0,    0,  363,    0,  363,    0,
      362,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  365,    0,    0,    0,    0,    0,    0,  365,    0,
        0,    0,  362,    0,    0,    0,    0,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  366,    0,    0,
        0,    0,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  367,    0,    0,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,    0,    0,    0,    0,
        0,    0,  368,    0,    0,    0,    0,    0,    0,    0,
        0,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,    0,    0,    0,    0,    0,    0,    0,  369,    0,

        0,    0,  368,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  370,    0,    0,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,    0,    0,    0,    0,
        0,    0,  371,    0,  368,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,    0,    0,    0,    0,    0,
        0,    0,  373,    0,  373,    0,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,    0,  372,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  375,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,    0,
        0,    0,    0,    0,    0,  377,    0,    0,    0,    0,
        0,    0,  377,    0,    0,    0,    0,    0,    0,    0,
      375,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,    0,    0,    0,    0,    0,    0,    0,  378,    0,
      378,    0,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  380,    0,    0,    0,    0,    0,    0,
      380,    0,    0,    0,  377,    0,    0,    0,    0,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  381,
        0,    0,    0,    0,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  382,    0,    0,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,    0,  383,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,    0,
      385,    0,    0,    0,    0,    0,  386,    0,  386,    0,
      383,  386,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  389,  385,    0,    0,    0,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  390,    0,    0,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,    0,
      391,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,    0,  393,    0,    0,    0,    0,    0,  394,    0,
      394,    0,  391,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,    0,  393,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  399,    0,    0,    0,    0,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      400,    0,    0,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,    0,  401,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,    0,    0,    0,    0,    0,

        0,  404,    0,    0,    0,    0,    0,    0,  404,    0,
        0,    0,    0,    0,    0,    0,  401,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,    0,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,    0,
        0,    0,    0,    0,    0,    0,  409,    0,  409,    0,
      408,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  410,    0,    0,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,    0,    0,    0,    0,    0,    0,
      411,    0,  408,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,    0,    0,    0,    0,    0,    0,    0,
      413,    0,    0,    0,  412,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  414,    0,    0,    0,    0,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
        0,    0,    0,    0,  415,    0,  412,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  416,    0,    0,
        0,    0,    0,    0,  416,    0,    0,    0,    0,    0,

        0,    0,    0,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  418,  416,    0,    0,    0,    0,    0,
      418,    0,    0,    0,    0,    0,    0,    0,    0,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,    0,
        0,    0,    0,    0,    0,    0,  416,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,    0,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,    0,

        0,    0,    0,    0,    0,    0,  423,    0,  423,    0,
      422,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  424,    0,    0,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,    0,    0,    0,    0,    0,    0,
      425,    0,  422,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,    0,    0,    0,    0,    0,    0,    0,
      427,    0,    0,    0,  426,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,    0,    0,    0,    0,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

        0,    0,    0,    0,  429,    0,  426,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  430,    0,    0,
        0,    0,    0,    0,  430,    0,    0,    0,    0,    0,
        0,    0,    0,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,    0,  430,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  433,    0,    0,    0,    0,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
        0,    0,    0,    0,  434,    0,  430,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,    0,  435,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  438,
        0,    0,    0,    0,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,    0,    0,    0,    0,  439,    0,
      435,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,    0,  440,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,    0,    0,    0,    0,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,    0,    0,
        0,    0,  444,    0,  440,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,    0,  445,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  447,    0,
        0,    0,    0,    0,  448,    0,  448,    0,  445,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,    0,

      447,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  452,    0,    0,    0,    0,    0,    0,  452,    0,
        0,    0,    0,    0,    0,    0,    0,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  453,    0,    0,
        0,    0,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  454,    0,    0,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,    0,  455,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,    0,  457,    0,
        0,    0,    0,    0,  458,    0,  458,    0,  455,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,    0,
      457,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,    0,    0,    0,    0,    0,    0,  462,    0,
        0,    0,    0,    0,    0,    0,    0,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  469,    0,    0,
        0,    0,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  470,    0,    0,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,    0,  471,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  474,    0,    0,

        0,    0,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,    0,    0,    0,    0,  475,    0,  471,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,    0,
      476,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,    0,  476,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  484,  484,  484,  484,  484,  484,  484,

      484,  484,    0,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  485,  485,
      485,  485,  485,  485,  485,  485,  485,    0,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  486,  486,  486,  486,  486,  486,  486,
      486,  486,    0,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,    0,  486,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  487,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,    0,    0,    0,    0,    0,    0,    0,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,    0,    0,    0,    0,  487,    0,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  488,  488,  488,  488,
      488,  488,  488,  488,  488,    0,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481
    } ;

static yyconst yy_state_type yy_NUL_trans[481] =
    {   0,
        8,    8,   45,   45,    8,    8,    0,    0,    0,    0,
        0,   52,   54,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   56,    0,    0,    0,
        0,   52,    0,   54,    0,   56,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SONLexer.lex"

#line 8 "SONLexer.lex"

#include <string>
#include <sstream>
#include "SONLexer.h"

/* import the parser's token type into a local typedef */
typedef wasp::SONParser::token token;
typedef wasp::SONParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SONFlexLexer" */
/*%option yyclass="wasp::SONLexerImpl"*/
/* enable scanner to generate debug output. disable this for release
* versions. */
/*%option debug*/
/* no support for include files is planned */
/* enables the use of start condition stacks */


/* !!! The string allows hyphens (not trailing hyphens)!!! */
/* This string does not allow special characters '-','/'
*  and should only occur in the context of reference
*/
/*
* The 'execution unit' is a rebranded SCALE sequence construct
* where the sequence started with the unit_start rule below
* and terminated with unit_end rule below.
* We reproduce it here to account for the input construct
* while in transition...
*/
/* The following paragraph suffices to track locations accurately. Each time
* yylex is invoked, the begin position is moved onto the end position. */
#line 101 "SONLexer.lex"
#define YY_USER_ACTION  yylloc->columns(yyleng); file_offset+=yyleng;
#line 2441 "SONLexer.cpp"

#define INITIAL 0
#define subtraction 1
#define execution_unit 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 104 "SONLexer.lex"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();

 /*** BEGIN EXAMPLE - Change the wasp lexer rules below ***/

#line 2556 "SONLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7992 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 113 "SONLexer.lex"
{
    yy_push_state(execution_unit); // enter the 'unit' of execution
        capture_token(yylval,wasp::EXECUTION_UNIT_START);
    return token::EXECUTION_UNIT_START;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 118 "SONLexer.lex"
{
    yy_pop_state(); // pop the execution state
    capture_token(yylval,wasp::EXECUTION_UNIT_END);
    return token::EXECUTION_UNIT_END;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 123 "SONLexer.lex"
{ // capture the subtraction, return the literal '-'
    yy_pop_state();
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 128 "SONLexer.lex"
{
    capture_token(yylval,wasp::FILL_EXPR);
    return token::FILLER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_COMMA);
    return token::COMMA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "SONLexer.lex"
{
    capture_token(yylval,wasp::COLON);
    return token::COLON;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 140 "SONLexer.lex"
{
    capture_token(yylval,wasp::LTE);
    return token::LTE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "SONLexer.lex"
{
    capture_token(yylval,wasp::GTE);
    return token::GTE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 148 "SONLexer.lex"
{
    capture_token(yylval,wasp::LT);
    return token::LT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 152 "SONLexer.lex"
{
    capture_token(yylval,wasp::GT);
    return token::GT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 156 "SONLexer.lex"
{
    capture_token(yylval,wasp::EQ);
    return token::EQ;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 160 "SONLexer.lex"
{
    capture_token(yylval,wasp::BANG);
    return token::BANG;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 164 "SONLexer.lex"
{
    capture_token(yylval,wasp::ASSIGN);
    return token::ASSIGN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 168 "SONLexer.lex"
{
    capture_token(yylval,wasp::NEQ);
    return token::NEQ;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_AND);
    return token::AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 176 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_OR);
    return token::OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 180 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACKET);
    return token::LBRACKET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 184 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACKET);
    return token::RBRACKET;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 188 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACE);
    return token::LBRACE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 192 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACE);
    return token::RBRACE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 196 "SONLexer.lex"
{
    capture_token(yylval,wasp::EXPONENT);
    return token::EXPONENT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 200 "SONLexer.lex"
{
    capture_token(yylval,wasp::MULTIPLY);
    return token::MULTIPLY;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 204 "SONLexer.lex"
{
  capture_token(yylval,wasp::DIVIDE);
  return token::DIVIDE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 208 "SONLexer.lex"
{
  capture_token(yylval,wasp::PLUS);
  return token::PLUS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 212 "SONLexer.lex"
{
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 216 "SONLexer.lex"
{
  capture_token(yylval,wasp::LPAREN);
  return token::LPAREN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 220 "SONLexer.lex"
{
 capture_token(yylval,wasp::RPAREN);
 return token::RPAREN;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 225 "SONLexer.lex"
{
    yy_push_state(subtraction); // if we have a minus sign immediately following, subtraction is occurring
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 230 "SONLexer.lex"
{
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "SONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 242 "SONLexer.lex"
{
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
/* gobble up white-spaces */
case 32:
YY_RULE_SETUP
#line 247 "SONLexer.lex"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 252 "SONLexer.lex"
{
    yylloc->lines(yyleng); yylloc->step();
    m_token_data.push_line(file_offset-yyleng);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 257 "SONLexer.lex"
{
    capture_token(yylval,wasp::QUOTED_STRING);
    return token::QSTRING;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 261 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_TRUE);
    return token::TOKEN_TRUE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 265 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_FALSE);
    return token::TOKEN_FALSE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 270 "SONLexer.lex"
{
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 274 "SONLexer.lex"
{
    capture_token(yylval,wasp::COMMENT);
    return token::COMMENT;
}
	YY_BREAK
/* pass all other characters up to bison
  * NOTE: references do not support whitespace */
case 39:
YY_RULE_SETUP
#line 281 "SONLexer.lex"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the wasp lexer rules above ***/
case 40:
YY_RULE_SETUP
#line 287 "SONLexer.lex"
ECHO;
	YY_BREAK
#line 2973 "SONLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(subtraction):
case YY_STATE_EOF(execution_unit):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SONfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SONfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SONrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SONrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		if ( *yy_cp )
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			}
		else
			yy_current_state = yy_NUL_trans[yy_current_state];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	yy_current_state = yy_NUL_trans[yy_current_state];
	yy_is_jam = (yy_current_state == 0);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SONalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SONalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SONfree((void *) b->yy_ch_buf  );

	SONfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SONalloc(new_size  );

		else
			(yy_start_stack) = (int *) SONrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SONalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SONrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SONfree (void * ptr )
{
	free( (char *) ptr );	/* see SONrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "SONLexer.lex"



namespace wasp {

SONLexerImpl::SONLexerImpl(
                TokenPool<> & token_data,
                std::istream* in,
                std::ostream* out)
    : SONFlexLexer(in, out)
    , m_token_data(token_data)
    , file_offset(0)
{
}

SONLexerImpl::~SONLexerImpl()
{
}

void SONLexerImpl::set_debug(bool b)
{
    yy_flex_debug = b;
}
void SONLexerImpl::rewind()
{
    yyin->seekg(-yyleng,std::ios_base::cur);
    yyless(0);
}
void SONLexerImpl::capture_token(
        wasp::SONParser::semantic_type* yylval
        ,wasp::NODE type)
{
    size_t offset = file_offset - yyleng;
    yylval->node_index = m_token_data.size();
    m_token_data.push(yytext,type,offset);
}
}

/* This implementation of SONFlexLexer::yylex() is required to fill the
 * vtable of the class SONFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SONLexerImpl class instead. */

#ifdef yylex
#undef yylex
#endif

int SONFlexLexer::yylex()
{
    std::cerr << "in SONFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SONFlexLexer::yywrap()
{
    return 1;
}

