#line 2 "SONLexer.cpp"
#line 2 "SONLexer.lex"
/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H




#line 11 "SONLexer.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SONFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *SONalloc (yy_size_t  );
void *SONrealloc (void *,yy_size_t  );
void SONfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "waspcore/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[388] =
    {   0,
        0,    0,    0,    0,    0,    0,   41,   39,   32,   33,
       12,   39,   38,   39,   39,   26,   27,   22,   24,    5,
       25,   39,   23,   29,    6,    9,   13,   10,   37,   37,
       37,   37,   37,   17,   18,   21,   37,   37,   37,   37,
       19,   39,   20,    1,   40,   40,   40,    3,   37,   32,
       14,    0,   34,   38,   15,    0,   31,   38,   28,   31,
       29,    0,    0,    0,    0,    0,    7,   11,    8,   37,
        0,    4,   37,   37,   36,   37,   37,   37,   37,   37,
       37,   37,   16,   37,   30,    0,   38,   31,    0,    0,
        0,   29,    0,    0,    0,    0,    0,    0,    0,    0,

        4,    0,    0,    4,    4,    4,   37,   37,   37,   37,
       37,   35,   37,   37,    2,    0,    0,   31,    0,   31,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    4,
        0,    4,    4,    0,    0,    4,    0,    0,    0,    4,
       37,   37,   37,   31,    0,    0,    0,   31,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    0,    0,    0,    4,    0,    0,    0,
        4,    0,    4,    0,    0,    0,    4,    0,    0,    4,
        0,    4,    4,   37,    0,    0,   31,   31,    0,    0,
       31,    0,    0,    0,    4,    4,    0,    0,    0,    0,

        0,    0,    4,    4,    0,    0,    0,    0,    0,    4,
        0,    4,    0,    0,    4,    0,    4,    4,    0,    0,
        0,    4,    0,    0,   31,    0,    0,   31,    0,    0,
        0,    4,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    0,    0,    4,    0,    0,    0,    4,    0,    0,
        0,    0,    4,    0,    0,    0,    4,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    4,    4,    0,    0,
        4,    0,   31,    0,    0,    0,    0,    0,    4,    0,
        4,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    4,    0,    0,    0,    0,    0,    0,    4,

        4,    0,    0,    4,    0,    0,    4,    4,    0,    0,
        4,    0,    4,    0,    0,    4,    0,    0,    4,    0,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    4,
        0,    0,    4,    0,    4,    0,    0,    4,    0,    4,
        0,    0,    4,    4,    0,    0,    4,    0,    0,    0,
        0,    4,    4,    0,    0,    4,    0,    0,    0,    4,
        0,    4,    0,    4,    0,    0,    4,    0,    4,    0,
        0,    4,    0,    4,    0,    4,    0
    } ;

static yyconst flex_int32_t yy_base[395] =
    {   0,
        0,  117,   94,   95,  275,   75,  335, 6579,    3, 6579,
      262,  285,    0,  280,  278, 6579, 6579, 6579, 6579, 6579,
     6579,  195,  267,  208, 6579,  251,  250,  249,    0,  243,
       69,   99,  186, 6579, 6579, 6579,  204,  196,  192,  203,
     6579,  161, 6579,  222, 6579,  246,  240, 6579,  192,  273,
     6579,  244, 6579,    0, 6579,  237,  276,    0, 6579,  298,
      333,  369,  400,  426,  452,  478, 6579, 6579, 6579,    0,
      308,  269,  199,  166,    0,  188,  155,  185,  152,  158,
       92,   38, 6579,  203, 6579,  493,    0,  506,  107,  516,
      528,  541,  567,  577,  604,  630,  640,  667,  693,  703,

      721,  747,  757,  775,  785,  808,  839,   64,   31,   76,
       42,    0,   27,   40,    0,  818,  849,  862,  884,  897,
      923,  951,  977,  999, 1031, 1057, 1085, 1107, 1118, 1128,
     1150, 1161, 1183, 1215, 1237, 1247,   93, 1193, 1257, 1269,
       68,   35,   34, 1302, 1324, 1279, 1334, 1356, 1378, 1393,
     1410, 1422, 1448,   87, 1458, 1476, 1502, 1524, 1534, 1556,
     1582,   86, 1544, 1592, 1620, 1642, 1653,   51, 1663, 1675,
     1687, 1710, 1720,   47, 1730, 1742, 1754, 1776, 1786, 1796,
     1818, 1830, 1852,   19, 1884, 1862, 1906, 1928, 1960, 1938,
     1982, 1992, 2002, 2028, 2038, 2061, 2092, 2115, 2141, 2071,

     2151, 2177, 2199, 2210, 2232, 2253, 2280, 2290, 2302, 2313,
     2335, 2346, 2356, 2368, 2379, 2401, 2412, 2422, 2444, 2454,
     2476, 2486, 2508, 2518, 2540, 2555, 2565, 2578, 2604, 2632,
     2647, 2658,   18, 2614, 2668, 2680, 2690, 2712, 2738, 2760,
     2792, 2814, 2829, 2846,   14, 2856, 2868, 2880, 2902, 2912,
     2938, 2960, 2971, 2993, 3003, 3013, 3025, 3047, 3058, 3080,
     3090, 3100, 3112, 3134, 3149, 3166, 3176, 3186, 3208, 3218,
     3240, 3250, 3263, 3278, 3288, 3314, 3324, 3336, 3347, 3369,
     3380, 3406, 3434, 3416, 3460, 3475, 3485, 3511, 3521, 3533,
     3544, 3566, 3577, 3603, 3631, 3613, 3657, 3672, 3682, 3692,

     3702, 3724, 3734, 3756, 3771, 3781, 3791, 3801, 3823, 3833,
     3855, 3865, 3875, 3890, 3900, 3910, 3920, 3946, 3964, 3986,
     3996, 4006, 4018, 4040, 4055, 4072, 4098, 4108, 4134, 4152,
     4174, 4184, 4194, 4206, 4228, 4243, 4260, 4286, 4296, 4308,
     4323, 4340, 4350, 4360, 4372, 4387, 4404, 4414, 4424, 4436,
     4451, 4468, 4478, 4488, 4510, 4520, 4542, 4552, 4578, 4593,
     4603, 4613, 4623, 4645, 4655, 4677, 4687, 4713, 4723, 4733,
     4743, 4753, 4763, 4773, 4788, 4798, 4808, 4818, 4830, 4845,
     4862, 4872, 4882, 4894, 4904, 4914, 6579, 4973, 5228, 5483,
     5738, 5993, 6201, 6323

    } ;

static yyconst flex_int32_t yy_def[395] =
    {   0,
      388,  388,  389,  389,    2,    2,  387,  387,  387,  387,
      387,  390,  391,  387,  392,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  393,  393,
      393,  393,  393,  387,  387,  387,   30,  393,  393,  393,
      387,  387,  387,  387,  387,  390,  392,  387,  393,  387,
      387,  390,  387,  391,  387,  392,  387,  394,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  393,
      387,   30,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  387,  393,  387,  387,  394,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  393,
      393,  393,  393,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  393,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,    0,  387,  387,  387,
      387,  387,  387,  387

    } ;

static yyconst flex_int32_t yy_nxt[6836] =
    {   0,
      387,  387,  387,  387,  387,  387,  387,  387,    9,   10,
      387,   50,    9,  387,  387,   50,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,    9,   11,   12,   50,  387,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   25,  247,   26,
       27,   28,  235,  139,   29,   29,   29,   29,   29,   30,
       29,   29,   29,   29,   29,   29,   29,   31,   29,   29,
       29,   29,   29,   32,   29,   29,   29,   29,   33,   29,
       34,  176,   35,   36,   29,  170,   29,   29,   29,   29,

       29,   37,   29,   29,   29,   29,   29,   29,   29,   38,
       29,   29,   29,   29,   29,   39,   29,   29,   29,   29,
       40,   29,   41,   42,   43,    9,   10,   46,   46,    9,
      164,  156,   47,   47,   75,   75,   75,  139,   48,   48,
      112,  143,  112,   49,  112,  142,  141,   75,    9,   11,
       12,   91,  112,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   25,   49,   26,   44,   28,   75,
       76,   29,   29,   29,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   29,   29,   29,

       32,   29,   29,   29,   29,   33,   29,   34,  114,   35,
       36,   29,   77,   29,   29,   29,   29,   29,   37,   29,
       29,   29,   29,   29,   29,   29,   38,   29,   29,   29,
       29,   29,   39,   29,   29,   29,   29,   40,   29,   41,
       42,   43,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   59,   60,   78,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  113,  112,  112,   70,   84,
      115,  111,  110,  109,  108,   53,   62,   53,   53,   53,
       63,   50,   68,   64,   83,   50,   79,   65,   71,   66,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       80,   84,  115,   82,   50,   81,   75,   73,   62,   69,
       68,   67,   63,   58,  106,   64,   53,   55,   53,   65,
       85,   66,   51,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   70,  387,   27,  387,  107,  387,   74,
      387,  387,   85,  387,   86,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   70,   89,  387,  387,  107,
      387,  387,  387,  387,  387,  387,   86,   59,   60,  387,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
      387,  387,  387,  387,  387,  387,  387,  387,   89,  387,

      387,   62,  387,  387,  387,   63,  387,  387,   64,  387,
      387,   90,   65,   91,   66,  387,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  387,  387,  387,  387,
      387,   93,  387,   62,  387,  387,  387,   63,   93,  387,
       64,  387,  387,  387,   65,   94,   66,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   96,  387,  387,
      387,  387,  387,  387,   96,  387,  387,  387,  387,  387,
      387,   97,  387,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   99,  387,  387,  387,  387,  387,  387,
       99,  387,  387,  387,  387,  387,  387,  100,  387,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  102,
      387,  387,  387,  387,  387,  387,  102,  387,  387,  387,
      387,  387,  387,  103,  387,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  116,  387,  117,  387,  387,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       85,  387,  387,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,  387,  119,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,   59,   60,  387,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   93,  387,

      387,  387,  387,  387,  387,   93,  119,  387,  387,   89,
      387,  387,   94,  387,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  387,  122,  387,  387,  387,  387,
      387,   89,  122,  387,  387,  387,  387,  387,  387,  123,
      387,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   96,  387,  387,  387,  387,  387,  387,   96,  387,
      387,  387,  124,  387,  387,   97,  387,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  387,  126,  387,

      387,  387,  387,  387,  124,  126,  387,  387,  387,  387,
      387,  387,  127,  387,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   99,  387,  387,  387,  387,  387,
      387,   99,  387,  387,  387,  128,  387,  387,  100,  387,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      387,  387,  387,  387,  387,  387,  130,  128,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  102,  387,
      387,  387,  387,  387,  387,  102,  387,  387,  387,  131,
      387,  387,  103,  387,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  387,  387,  387,  387,  387,  387,
      133,  131,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  387,  134,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  135,  387,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  134,  137,  387,  387,  387,
      387,  138,  387,  139,  387,  135,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,   85,  387,  137,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  387,
      387,  387,  387,  387,  387,  387,  146,  387,  147,  387,
      145,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,   85,  387,  387,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  122,  387,  387,  387,  387,  387,
      387,  122,  145,  387,  387,  149,  387,  387,  387,  387,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      387,  387,  122,  387,  387,  387,  387,  387,  387,  122,
      387,  150,  387,  387,  387,  387,  151,  149,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  122,  387,
      387,  387,  387,  387,  387,  122,  387,  387,  387,  387,
      387,  387,  387,  150,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  387,  387,  387,  387,  387,  387,
      387,  155,  387,  156,  387,  154,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  387,  387,  387,  387,
      387,  387,  126,  387,  387,  387,  387,  387,  387,  126,
      387,  387,  387,  387,  387,  387,  387,  154,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  126,  387,
      387,  387,  387,  387,  387,  126,  387,  387,  387,  158,

      387,  387,  159,  387,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  387,  387,  126,  387,  387,  387,
      387,  387,  387,  126,  387,  387,  387,  387,  387,  387,
      387,  158,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  387,  387,  387,  387,  387,  387,  387,  163,
      387,  164,  387,  162,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  387,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  162,  166,  387,  387,  387,
      387,  387,  169,  387,  170,  387,  168,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  387,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  166,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  168,  172,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      387,  174,  387,  387,  387,  387,  387,  175,  387,  176,
      387,  172,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  387,  387,  387,  387,  387,  387,  387,  178,
      387,  179,  387,  174,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  106,  181,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  387,  184,  387,  387,
      387,  387,  387,  387,  387,  387,   85,  181,  387,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  387,
      387,  387,  387,  387,  387,  387,  186,  387,  117,  184,
      185,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  387,  387,  387,  387,  387,  387,  387,  387,  387,

       85,  387,  185,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  387,  387,  387,  387,  387,  387,  387,
      190,  387,  387,  387,  189,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  192,  387,  193,  387,  387,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      387,  387,  387,  387,  387,  387,  189,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  196,  387,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  122,
      387,  387,  387,  387,  387,  387,  122,  387,  387,  387,
      197,  387,  387,  387,  387,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  387,  198,  387,  387,  387,
      387,  387,  197,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  122,  387,  387,  387,  387,  387,  387,
      122,  387,  387,  387,  387,  387,  387,  123,  198,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  387,
      387,  387,  387,  387,  387,  387,  200,  387,  201,  387,
      154,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  204,  154,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  126,  387,  387,  387,  387,  387,  387,
      126,  387,  387,  387,  205,  387,  387,  387,  387,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  387,
      206,  126,  387,  387,  387,  387,  205,  387,  126,  387,
      387,  387,  387,  387,  387,  127,  387,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  387,  387,  387,
      387,  387,  206,  387,  208,  387,  209,  387,  162,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  387,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      162,  211,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  130,  387,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  387,  387,  387,  387,  387,  387,
      387,  387,  213,  211,  214,  168,  387,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  168,  216,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  133,

      387,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      216,  387,  174,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  387,  174,  387,  387,  387,  387,  387,
      220,  387,  221,  387,  219,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  106,  387,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  219,  387,  137,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  387,
      223,  387,  387,  387,  387,  387,  224,  387,  387,  387,
      137,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  387,  387,  387,  387,  387,  387,  387,  387,  387,
       85,  387,  223,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  387,  387,  387,  387,  387,  387,  387,
      387,  387,   85,  387,  185,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  387,  226,  387,  387,  387,

      387,  387,  227,  387,  147,  387,  185,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  387,  387,  387,
      387,  387,  387,  387,  387,  387,   85,  387,  226,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  122,
      387,  387,  387,  387,  387,  387,  122,  387,  387,  387,
      387,  387,  387,  387,  387,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  387,  230,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  231,  387,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  230,  233,
      387,  387,  387,  387,  234,  387,  235,  387,  231,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  387,
      387,  387,  387,  387,  387,  387,  387,  237,  387,  238,
      387,  233,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  122,  387,  387,  387,  387,  387,  387,  122,
      387,  387,  387,  387,  387,  387,  387,  387,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  126,  240,
      387,  387,  387,  387,  387,  126,  387,  387,  387,  387,
      387,  387,  387,  387,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  387,  387,  387,  387,  387,  387,
      387,  240,  387,  387,  387,  242,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  387,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  243,  387,  387,
      387,  387,  387,  387,  246,  387,  247,  242,  245,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  387,
      387,  387,  387,  387,  387,  249,  387,  250,  387,  243,

      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      245,  126,  387,  387,  387,  387,  387,  387,  126,  387,
      387,  387,  387,  387,  387,  387,  387,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  387,  252,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  387,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      387,  387,  387,  387,  387,  387,  387,  255,  387,  256,
      252,  254,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  387,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  254,  258,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  387,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  387,  387,  387,  387,
      387,  387,  387,  261,  387,  262,  258,  260,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  387,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  260,
      264,  387,  387,  387,  387,  387,  266,  387,  179,  387,
      265,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  387,  264,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  265,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  387,  387,  387,  387,  387,  387,  387,
      270,  387,  387,  387,  269,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  387,  387,  387,  387,  387,
      387,  387,  387,  387,   85,  387,  269,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  272,  387,  387,

      387,  387,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,   85,  387,  387,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  122,  387,  387,  387,  387,
      387,  387,  122,  387,  387,  387,  226,  387,  387,  387,
      387,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  387,  274,  387,  275,  387,  193,  387,  226,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  277,
      387,  278,  387,  387,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  274,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  196,  280,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  387,  233,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  280,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  122,
      387,  387,  387,  387,  387,  387,  122,  387,  387,  387,
      233,  387,  387,  387,  387,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  387,  387,  387,  387,  387,

      387,  387,  284,  387,  387,  387,  283,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  387,  387,  387,
      387,  387,  387,  126,  387,  387,  387,  387,  387,  387,
      126,  387,  387,  387,  387,  387,  387,  387,  283,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  387,
      387,  387,  387,  387,  387,  387,  287,  387,  201,  387,
      286,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  289,  387,  290,  387,  387,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  387,  387,  387,  387,
      387,  387,  286,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  387,  292,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  204,  387,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  292,  387,  245,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  126,
      387,  387,  387,  387,  387,  387,  126,  387,  387,  387,
      245,  387,  387,  387,  387,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  387,  387,  387,  387,  387,

      387,  387,  296,  387,  387,  387,  295,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  387,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  387,  387,
      387,  387,  387,  387,  387,  299,  387,  209,  295,  298,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      387,  298,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  387,  387,  387,  387,  387,  387,  387,  303,
      387,  387,  387,  302,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  387,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  387,  387,  387,  387,  387,
      387,  387,  306,  387,  214,  302,  305,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  387,  305,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  387,
      387,  387,  387,  387,  387,  387,  310,  387,  387,  387,
      309,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  312,  387,  387,  387,  387,  313,  313,  313,  313,

      313,  313,  313,  313,  313,  313,  387,  387,  387,  387,
      387,  387,  309,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  387,  265,  387,  387,  387,  387,  387,
      315,  387,  221,  387,  314,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  387,  265,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  314,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,   85,  387,  387,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      317,  387,  387,  387,  387,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  122,  387,  387,  387,  387,
      387,  387,  122,  387,  387,  387,  387,  387,  387,  387,
      387,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  387,  274,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  387,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  387,  387,  387,  387,  387,  387,
      387,  321,  387,  322,  274,  320,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  387,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  122,  387,  387,
      387,  387,  387,  387,  122,  387,  387,  320,  324,  387,
      387,  387,  387,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  387,  325,  387,  326,  387,  238,  387,
      324,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  122,  387,  387,  387,  387,  387,  387,  122,  387,

      387,  387,  387,  387,  387,  387,  325,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  328,  387,  387,
      387,  387,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  126,  387,  387,  387,  387,  387,  387,  126,
      387,  387,  387,  387,  387,  387,  387,  387,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  387,  286,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      387,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  387,  387,  387,  387,  387,  387,  387,  332,  387,
      333,  286,  331,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  387,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  126,  387,  387,  387,  387,  387,
      387,  126,  387,  387,  331,  335,  387,  387,  387,  387,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      387,  336,  387,  337,  387,  250,  387,  335,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  126,  387,
      387,  387,  387,  387,  387,  126,  387,  387,  387,  387,

      387,  387,  387,  336,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  339,  387,  387,  387,  387,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  387,
      298,  387,  387,  387,  387,  387,  342,  387,  256,  387,
      341,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  387,  298,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  341,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  344,  387,  387,  387,  387,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  387,  305,
      387,  387,  387,  387,  387,  347,  387,  262,  387,  346,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      387,  305,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  346,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  349,  387,  387,  387,  387,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  122,  314,  387,
      387,  387,  387,  387,  122,  387,  387,  387,  387,  387,
      387,  387,  387,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  387,  387,  387,  387,  387,  387,  387,
      314,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  387,  387,  387,  387,  387,  387,  387,  352,  387,
      278,  387,  351,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  387,  351,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  387,  387,  387,  387,  387,
      387,  387,  356,  387,  387,  387,  355,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  358,  387,  387,

      387,  387,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  387,  387,  387,  387,  387,  387,  355,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  122,
      387,  387,  387,  387,  387,  387,  122,  387,  387,  387,
      387,  387,  387,  387,  387,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  126,  325,  387,  387,  387,
      387,  387,  126,  387,  387,  387,  387,  387,  387,  387,
      387,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  387,  387,  387,  387,  387,  387,  387,  325,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  387,
      387,  387,  387,  387,  387,  387,  361,  387,  290,  387,
      360,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  387,  360,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  387,  387,  387,  387,  387,  387,  387,
      365,  387,  387,  387,  364,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  367,  387,  387,  387,  387,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      387,  387,  387,  387,  387,  387,  364,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  126,  387,  387,
      387,  387,  387,  387,  126,  387,  387,  387,  387,  387,
      387,  387,  387,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  387,  336,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  369,  387,  387,  387,  387,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      387,  387,  387,  387,  387,  387,  336,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  387,  341,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  371,
      387,  387,  387,  387,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  387,  387,  387,  387,  387,  387,
      341,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  387,  346,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  373,  387,  387,  387,  387,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  387,  387,
      387,  387,  387,  387,  346,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  387,  351,  387,  387,  387,
      387,  387,  376,  387,  322,  387,  375,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  387,  351,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  375,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  122,
      387,  387,  387,  387,  387,  387,  122,  387,  387,  387,
      387,  387,  387,  387,  387,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  378,  387,  387,  387,  387,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      387,  360,  387,  387,  387,  387,  387,  381,  387,  333,
      387,  380,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  387,  360,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  380,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  126,  387,  387,  387,  387,  387,
      387,  126,  387,  387,  387,  387,  387,  387,  387,  387,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      383,  387,  387,  387,  387,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  387,  375,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  385,  387,  387,
      387,  387,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  387,  387,  387,  387,  387,  387,  375,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  387,
      380,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  387,  380,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  387,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   54,   54,
       54,   54,   54,   54,   54,   54,   54,  387,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   56,   56,   56,   56,   56,   56,   56,

       56,   56,  387,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,  387,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,  387,  387,
      387,  387,  387,  387,  387,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  387,  387,  387,  387,   70,  387,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  387,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,    7,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387
    } ;

static yyconst flex_int32_t yy_chk[6836] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
        0,    9,    1,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    1,    9,    0,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,  245,    1,
        1,    1,  233,  184,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,  174,    1,    1,    1,  168,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    3,    4,    2,
      162,  154,    3,    4,  143,  142,  141,  137,    3,    4,
      114,  113,  111,    6,  110,  109,  108,   31,    2,    2,
        2,   89,   82,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    6,    2,    2,    2,   31,
       32,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   81,    2,
        2,    2,   32,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   24,   24,   33,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   80,   79,   78,   37,   49,
       84,   77,   76,   74,   73,   56,   24,   52,   47,   46,
       24,   50,   44,   24,   42,   50,   33,   24,   30,   24,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       37,   49,   84,   40,   50,   39,   38,   30,   24,   28,
       27,   26,   24,   23,   72,   24,   15,   14,   12,   24,
       57,   24,   11,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   72,    7,    5,    0,   72,    0,   30,
        0,    0,   60,    0,   57,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   72,   60,    0,    0,   72,
        0,    0,    0,    0,    0,    0,   57,   61,   61,    0,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
        0,    0,    0,    0,    0,    0,    0,    0,   60,    0,

        0,   61,    0,    0,    0,   61,    0,    0,   61,    0,
        0,   62,   61,   62,   61,    0,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,    0,    0,    0,    0,
        0,   63,    0,   61,    0,    0,    0,   61,   63,    0,
       61,    0,    0,    0,   61,   63,   61,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   64,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
        0,   64,    0,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   65,    0,    0,    0,    0,    0,    0,
       65,    0,    0,    0,    0,    0,    0,   65,    0,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   66,
        0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
        0,    0,    0,   66,    0,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   86,    0,   86,    0,    0,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       88,    0,    0,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,    0,   88,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   92,   92,    0,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   93,    0,

        0,    0,    0,    0,    0,   93,   88,    0,    0,   92,
        0,    0,   93,    0,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,    0,   95,    0,    0,    0,    0,
        0,   92,   95,    0,    0,    0,    0,    0,    0,   95,
        0,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   96,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,   95,    0,    0,   96,    0,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,    0,   98,    0,

        0,    0,    0,    0,   95,   98,    0,    0,    0,    0,
        0,    0,   98,    0,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   99,    0,    0,    0,    0,    0,
        0,   99,    0,    0,    0,   98,    0,    0,   99,    0,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
        0,    0,    0,    0,    0,    0,  101,   98,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  102,    0,
        0,    0,    0,    0,    0,  102,    0,    0,    0,  101,
        0,    0,  102,    0,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,    0,    0,    0,    0,    0,    0,
      104,  101,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,    0,  104,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  104,  106,    0,    0,    0,
        0,  107,    0,  107,    0,  105,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  118,    0,  106,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
        0,    0,    0,    0,    0,    0,  119,    0,  119,    0,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  120,    0,    0,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  121,    0,    0,    0,    0,    0,
        0,  121,  118,    0,    0,  120,    0,    0,    0,    0,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
        0,    0,  122,    0,    0,    0,    0,    0,    0,  122,
        0,  121,    0,    0,    0,    0,  122,  120,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  123,    0,
        0,    0,    0,    0,    0,  123,    0,    0,    0,    0,
        0,    0,    0,  121,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,    0,    0,    0,    0,    0,    0,
        0,  124,    0,  124,    0,  123,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,    0,    0,    0,    0,
        0,    0,  125,    0,    0,    0,    0,    0,    0,  125,
        0,    0,    0,    0,    0,    0,    0,  123,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  126,    0,
        0,    0,    0,    0,    0,  126,    0,    0,    0,  125,

        0,    0,  126,    0,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,    0,    0,  127,    0,    0,    0,
        0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
        0,  125,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,    0,    0,    0,    0,    0,    0,    0,  128,
        0,  128,    0,  127,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,    0,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  127,  129,    0,    0,    0,
        0,    0,  131,    0,  131,    0,  130,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,    0,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  130,  132,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
        0,  133,    0,    0,    0,    0,    0,  134,    0,  134,
        0,  132,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,    0,    0,    0,    0,    0,    0,    0,  135,
        0,  135,    0,  133,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  140,  136,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,  144,  136,    0,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,    0,
        0,    0,    0,    0,    0,    0,  145,    0,  145,  140,
      144,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      148,    0,  144,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,    0,    0,    0,    0,    0,    0,    0,
      149,    0,    0,    0,  148,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  150,    0,  150,    0,    0,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
        0,    0,    0,    0,    0,    0,  148,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  152,    0,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  153,
        0,    0,    0,    0,    0,    0,  153,    0,    0,    0,
      152,    0,    0,    0,    0,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,    0,  153,    0,    0,    0,
        0,    0,  152,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  157,    0,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,    0,    0,  157,  153,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,    0,
        0,    0,    0,    0,    0,    0,  158,    0,  158,    0,
      157,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  160,  157,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  161,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,  160,    0,    0,    0,    0,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,    0,
      161,  165,    0,    0,    0,    0,  160,    0,  165,    0,
        0,    0,    0,    0,    0,  165,    0,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,    0,    0,    0,
        0,    0,  161,    0,  166,    0,  166,    0,  165,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,    0,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      165,  167,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  171,    0,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,    0,    0,    0,    0,    0,    0,
        0,    0,  172,  167,  172,  171,    0,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  171,  173,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  177,

        0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,    0,  177,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,    0,  177,    0,    0,    0,    0,    0,
      181,    0,  181,    0,  180,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  182,    0,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  180,    0,  182,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,    0,
      183,    0,    0,    0,    0,    0,  185,    0,    0,    0,
      182,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      187,    0,  183,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  188,    0,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,    0,  188,    0,    0,    0,

        0,    0,  189,    0,  189,    0,  187,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  191,    0,  188,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  194,
        0,    0,    0,    0,    0,    0,  194,    0,    0,    0,
        0,    0,    0,    0,    0,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,    0,  194,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  195,    0,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  194,  196,
        0,    0,    0,    0,  197,    0,  197,    0,  195,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,    0,
        0,    0,    0,    0,    0,    0,    0,  198,    0,  198,
        0,  196,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  199,    0,    0,    0,    0,    0,    0,  199,
        0,    0,    0,    0,    0,    0,    0,    0,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  202,  199,
        0,    0,    0,    0,    0,  202,    0,    0,    0,    0,
        0,    0,    0,    0,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,    0,    0,    0,    0,    0,    0,
        0,  199,    0,    0,    0,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,    0,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  203,    0,    0,
        0,    0,    0,    0,  205,    0,  205,  202,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,    0,
        0,    0,    0,    0,    0,  206,    0,  206,    0,  203,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      204,  207,    0,    0,    0,    0,    0,    0,  207,    0,
        0,    0,    0,    0,    0,    0,    0,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,    0,  207,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,    0,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
        0,    0,    0,    0,    0,    0,    0,  211,    0,  211,
      207,  210,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,    0,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  210,  212,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,    0,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,    0,    0,    0,    0,
        0,    0,    0,  216,    0,  216,  212,  215,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,    0,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  215,
      217,    0,    0,    0,    0,    0,  219,    0,  219,    0,
      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  218,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,    0,    0,    0,    0,    0,    0,    0,
      223,    0,    0,    0,  222,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  225,    0,  222,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,    0,    0,

        0,    0,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  228,    0,    0,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  229,    0,    0,    0,    0,
        0,    0,  229,    0,    0,    0,  228,    0,    0,    0,
        0,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,    0,  229,    0,  230,    0,  230,    0,  228,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
        0,  231,    0,    0,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  229,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  236,  232,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,    0,  236,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  232,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  239,
        0,    0,    0,    0,    0,    0,  239,    0,    0,    0,
      236,    0,    0,    0,    0,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,    0,    0,    0,    0,    0,

        0,    0,  240,    0,    0,    0,  239,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,    0,    0,    0,
        0,    0,    0,  241,    0,    0,    0,    0,    0,    0,
      241,    0,    0,    0,    0,    0,    0,    0,  239,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,    0,
        0,    0,    0,    0,    0,    0,  242,    0,  242,    0,
      241,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  243,    0,  243,    0,    0,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,    0,    0,    0,    0,
        0,    0,  241,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,    0,  244,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  248,    0,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  244,    0,  248,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  251,
        0,    0,    0,    0,    0,    0,  251,    0,    0,    0,
      248,    0,    0,    0,    0,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,    0,    0,    0,    0,    0,

        0,    0,  252,    0,    0,    0,  251,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,    0,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,    0,    0,
        0,    0,    0,    0,    0,  254,    0,  254,  251,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
        0,  253,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,    0,    0,    0,    0,    0,    0,    0,  258,
        0,    0,    0,  257,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,    0,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,    0,    0,    0,    0,    0,
        0,    0,  260,    0,  260,  257,  259,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,    0,  259,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,    0,
        0,    0,    0,    0,    0,    0,  264,    0,    0,    0,
      263,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  265,    0,    0,    0,    0,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,    0,    0,    0,    0,
        0,    0,  263,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,    0,  267,    0,    0,    0,    0,    0,
      269,    0,  269,    0,  268,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,    0,  267,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  268,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  273,    0,    0,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      274,    0,    0,    0,    0,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  276,    0,    0,    0,    0,
        0,    0,  276,    0,    0,    0,    0,    0,    0,    0,
        0,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,    0,  276,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,    0,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,    0,    0,    0,    0,    0,    0,
        0,  280,    0,  280,  276,  279,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,    0,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  282,    0,    0,
        0,    0,    0,    0,  282,    0,    0,  279,  281,    0,
        0,    0,    0,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,    0,  282,    0,  283,    0,  283,    0,
      281,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  285,    0,    0,    0,    0,    0,    0,  285,    0,

        0,    0,    0,    0,    0,    0,  282,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  286,    0,    0,
        0,    0,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  288,    0,    0,    0,    0,    0,    0,  288,
        0,    0,    0,    0,    0,    0,    0,    0,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,    0,  288,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
        0,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,    0,    0,    0,    0,    0,    0,    0,  292,    0,
      292,  288,  291,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,    0,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  294,    0,    0,    0,    0,    0,
        0,  294,    0,    0,  291,  293,    0,    0,    0,    0,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
        0,  294,    0,  295,    0,  295,    0,  293,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  297,    0,
        0,    0,    0,    0,    0,  297,    0,    0,    0,    0,

        0,    0,    0,  294,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  298,    0,    0,    0,    0,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,    0,
      300,    0,    0,    0,    0,    0,  302,    0,  302,    0,
      301,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,    0,  300,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  301,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  305,    0,    0,    0,    0,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,    0,  307,
        0,    0,    0,    0,    0,  309,    0,  309,    0,  308,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
        0,  307,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  308,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  314,    0,    0,    0,    0,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  316,    0,
        0,    0,    0,    0,  318,    0,    0,    0,    0,    0,
        0,    0,    0,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,    0,    0,    0,    0,    0,    0,    0,
      316,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,    0,    0,    0,    0,    0,    0,    0,  320,    0,
      320,    0,  319,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,    0,  319,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,    0,    0,    0,    0,    0,
        0,    0,  324,    0,    0,    0,  323,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  325,    0,    0,

        0,    0,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,    0,    0,    0,    0,    0,    0,  323,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  327,
        0,    0,    0,    0,    0,    0,  327,    0,    0,    0,
        0,    0,    0,    0,    0,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  329,  327,    0,    0,    0,
        0,    0,  329,    0,    0,    0,    0,    0,    0,    0,
        0,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,    0,    0,    0,    0,    0,    0,    0,  327,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,    0,
        0,    0,    0,    0,    0,    0,  331,    0,  331,    0,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,    0,  330,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,    0,    0,    0,    0,    0,    0,    0,
      335,    0,    0,    0,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,    0,    0,    0,    0,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

        0,    0,    0,    0,    0,    0,  334,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  338,    0,    0,
        0,    0,    0,    0,  338,    0,    0,    0,    0,    0,
        0,    0,    0,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,    0,  338,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  341,    0,    0,    0,    0,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
        0,    0,    0,    0,    0,    0,  338,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,    0,  343,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  346,
        0,    0,    0,    0,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,    0,    0,    0,    0,    0,    0,
      343,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,    0,  348,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  351,    0,    0,    0,    0,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,    0,    0,
        0,    0,    0,    0,  348,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,    0,  353,    0,    0,    0,
        0,    0,  355,    0,  355,    0,  354,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,    0,  353,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  354,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  359,
        0,    0,    0,    0,    0,    0,  359,    0,    0,    0,
        0,    0,    0,    0,    0,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,    0,    0,    0,    0,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
        0,  362,    0,    0,    0,    0,    0,  364,    0,  364,
        0,  363,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,    0,  362,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  363,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  368,    0,    0,    0,    0,    0,
        0,  368,    0,    0,    0,    0,    0,    0,    0,    0,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      375,    0,    0,    0,    0,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,    0,  377,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  380,    0,    0,
        0,    0,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,    0,    0,    0,    0,    0,    0,  377,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,    0,
      382,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,    0,  382,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  390,  390,  390,  390,  390,  390,  390,
      390,  390,    0,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  391,  391,  391,    0,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  392,  392,  392,  392,  392,  392,  392,

      392,  392,    0,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,    0,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,    0,    0,
        0,    0,    0,    0,    0,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,    0,    0,    0,    0,  393,    0,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  394,  394,  394,
      394,  394,    0,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387
    } ;

static yyconst yy_state_type yy_NUL_trans[387] =
    {   0,
        8,    8,   45,   45,    8,    8,    0,    0,    0,    0,
        0,   52,   54,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   56,    0,    0,    0,
        0,   52,    0,   54,    0,   56,    0,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SONLexer.lex"

#line 8 "SONLexer.lex"

#include <string>
#include <sstream>
#include "SONLexer.h"
#include "SONInterpreter.h"

/* import the parser's token type into a local typedef */
typedef wasp::SONParser::token token;
typedef wasp::SONParser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SONFlexLexer" */
/*%option yyclass="wasp::SONLexerImpl"*/
/* enable scanner to generate debug output. disable this for release
* versions. */
/*%option debug*/
/* no support for include files is planned */
/* enables the use of start condition stacks */


/* This string does not allow special characters '-','/'
*  and should only occur in the context of reference
*/
/*
* The 'execution unit' is a rebranded SCALE sequence construct
* where the sequence started with the unit_start rule below
* and terminated with unit_end rule below.
* We reproduce it here to account for the input construct
* while in transition...
*/
/* The following paragraph suffices to track locations accurately. Each time
* yylex is invoked, the begin position is moved onto the end position. */
#line 100 "SONLexer.lex"
#define YY_USER_ACTION  yylloc->columns(yyleng); file_offset+=yyleng;
#line 2092 "SONLexer.cpp"

#define INITIAL 0
#define subtraction 1
#define execution_unit 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 103 "SONLexer.lex"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();

 /*** BEGIN EXAMPLE - Change the wasp lexer rules below ***/

#line 2207 "SONLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6579 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 112 "SONLexer.lex"
{
    yy_push_state(execution_unit); // enter the 'unit' of execution
        capture_token(yylval,wasp::EXECUTION_UNIT_START);
    return token::EXECUTION_UNIT_START;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 117 "SONLexer.lex"
{
    yy_pop_state(); // pop the execution state
    capture_token(yylval,wasp::EXECUTION_UNIT_END);
    return token::EXECUTION_UNIT_END;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "SONLexer.lex"
{ // capture the subtraction, return the literal '-'
    yy_pop_state();
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 127 "SONLexer.lex"
{
    capture_token(yylval,wasp::FILL_EXPR);
    return token::FILLER;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 131 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_COMMA);
    return token::COMMA;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "SONLexer.lex"
{
    capture_token(yylval,wasp::COLON);
    return token::COLON;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 139 "SONLexer.lex"
{
    capture_token(yylval,wasp::LTE);
    return token::LTE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 143 "SONLexer.lex"
{
    capture_token(yylval,wasp::GTE);
    return token::GTE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "SONLexer.lex"
{
    capture_token(yylval,wasp::LT);
    return token::LT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 151 "SONLexer.lex"
{
    capture_token(yylval,wasp::GT);
    return token::GT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 155 "SONLexer.lex"
{
    capture_token(yylval,wasp::EQ);
    return token::EQ;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 159 "SONLexer.lex"
{
    capture_token(yylval,wasp::BANG);
    return token::BANG;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 163 "SONLexer.lex"
{
    capture_token(yylval,wasp::ASSIGN);
    return token::ASSIGN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 167 "SONLexer.lex"
{
    capture_token(yylval,wasp::NEQ);
    return token::NEQ;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_AND);
    return token::AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 175 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_OR);
    return token::OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 179 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACKET);
    return token::LBRACKET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 183 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACKET);
    return token::RBRACKET;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "SONLexer.lex"
{
    capture_token(yylval,wasp::LBRACE);
    return token::LBRACE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 191 "SONLexer.lex"
{
    capture_token(yylval,wasp::RBRACE);
    return token::RBRACE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 195 "SONLexer.lex"
{
    capture_token(yylval,wasp::EXPONENT);
    return token::EXPONENT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "SONLexer.lex"
{
    capture_token(yylval,wasp::MULTIPLY);
    return token::MULTIPLY;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 203 "SONLexer.lex"
{
  capture_token(yylval,wasp::DIVIDE);
  return token::DIVIDE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 207 "SONLexer.lex"
{
  capture_token(yylval,wasp::PLUS);
  return token::PLUS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "SONLexer.lex"
{
    capture_token(yylval,wasp::MINUS);
    return token::MINUS;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 215 "SONLexer.lex"
{
  capture_token(yylval,wasp::LPAREN);
  return token::LPAREN;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 219 "SONLexer.lex"
{
 capture_token(yylval,wasp::RPAREN);
 return token::RPAREN;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 "SONLexer.lex"
{
    yy_push_state(subtraction); // if we have a minus sign immediately following, subtraction is occurring
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 229 "SONLexer.lex"
{
    capture_token(yylval,wasp::INT);
    return token::INTEGER;
}
	YY_BREAK
/* Cannot match this rule when in the subtraction state, it will override as a longer match */
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "SONLexer.lex"
{
   // if we have a minus sign immediately following, subtraction is occurring
    yy_push_state(subtraction);
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "SONLexer.lex"
{
    capture_token(yylval,wasp::REAL);
    return token::DOUBLE;
}
	YY_BREAK
/* gobble up white-spaces */
case 32:
YY_RULE_SETUP
#line 246 "SONLexer.lex"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 251 "SONLexer.lex"
{
    yylloc->lines(yyleng); yylloc->step();
    interpreter.push_line_offset(file_offset-yyleng);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 256 "SONLexer.lex"
{
    capture_token(yylval,wasp::QUOTED_STRING);
    return token::QSTRING;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 260 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_TRUE);
    return token::TOKEN_TRUE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 264 "SONLexer.lex"
{
    capture_token(yylval,wasp::WASP_FALSE);
    return token::TOKEN_FALSE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 269 "SONLexer.lex"
{
    capture_token(yylval,wasp::STRING);
    return token::STRING;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 273 "SONLexer.lex"
{
    capture_token(yylval,wasp::COMMENT);
    return token::COMMENT;
}
	YY_BREAK
/* pass all other characters up to bison
  * NOTE: references do not support whitespace */
case 39:
YY_RULE_SETUP
#line 280 "SONLexer.lex"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the wasp lexer rules above ***/
case 40:
YY_RULE_SETUP
#line 286 "SONLexer.lex"
ECHO;
	YY_BREAK
#line 2624 "SONLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(subtraction):
case YY_STATE_EOF(execution_unit):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SONfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SONfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SONrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SONrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		if ( *yy_cp )
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			}
		else
			yy_current_state = yy_NUL_trans[yy_current_state];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	yy_current_state = yy_NUL_trans[yy_current_state];
	yy_is_jam = (yy_current_state == 0);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SONalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SONalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SONfree((void *) b->yy_ch_buf  );

	SONfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SONrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SONalloc(new_size  );

		else
			(yy_start_stack) = (int *) SONrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SONalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SONrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SONfree (void * ptr )
{
	free( (char *) ptr );	/* see SONrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "SONLexer.lex"



namespace wasp {

SONLexerImpl::SONLexerImpl(
                AbstractInterpreter & interpreter,
                std::istream* in,
                std::ostream* out)
    : SONFlexLexer(in, out)
    , interpreter(interpreter)
    , file_offset(0)
{
}

SONLexerImpl::~SONLexerImpl()
{
}

void SONLexerImpl::set_debug(bool b)
{
    yy_flex_debug = b;
}
void SONLexerImpl::rewind()
{
    yyin->seekg(-yyleng,std::ios_base::cur);
    yyless(0);
}
void SONLexerImpl::capture_token(
        wasp::SONParser::semantic_type* yylval
        ,wasp::NODE type)
{
    std::size_t offset = file_offset - yyleng;
    yylval->token_index = interpreter.token_count();
    interpreter.push_token(yytext,type,offset);
}
}

/* This implementation of SONFlexLexer::yylex() is required to fill the
 * vtable of the class SONFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SONLexerImpl class instead. */

#ifdef yylex
#undef yylex
#endif

int SONFlexLexer::yylex()
{
    std::cerr << "in SONFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SONFlexLexer::yywrap()
{
    return 1;
}

